****COMMAND****
https://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html



qa-icyte-sparc-db.integrichain.net

mahisayyed5855@gmail.com
docker logs --tail 200 icyte-sparc_app_1
docker logs -f icyte-sparc-app-1
docker logs --tail 200 icyte-sparc-app-background-1
docker logs --tail 200 icyte-sparc_app-file-scanner_1

git config --global http.sslBackend schannel

command: gunicorn -c gunicornconfig.py --bind=unix:/sock/claims.sock --timeout 3600 --workers=4 --limit-request-line 8190 --log-level=debug --reload wsgi

docker exec -it icyte-sparc_app_1 python manage.py load_scripts_db
docker volume prune (https://renehernandez.io/snippets/cleaning-local-docker-cache/)

# rebuilding container
docker-compose up -d --build
 volume
docker restart icyte-sparc_app_1 icyte-sparc_app-background_1 icyte-sparc_app-file-scanner_1 icyte-sparc_app-mft-background_1 icyte-sparc_app-reporting-background_1
      icyte-sparc_app-gp-cbk-background_1 icyte-sparc_app-medi-mc-pbr-background_1

ng serve --proxy-config ./proxy.conf.json

}*KKRJ4{n]q+}$P

ng build --watch
git fetch origin pull/4230/head:gp-development

http://localhost:4200/non-sso-login

cp -r dist/* ../static/
docker exec -it icyte-sparc-app-1 alembic upgrade head
docker exec -it paper-setter_app_1 alembic upgrade head
docker exec -it icyte-sparc_app_1 alembic stamp <version>
docker-compose exec app alembic downgrade -1
docker-compose run app alembic revision --autogenerate -m "Ticket-Number"
docker-compose exec app python manage.py load

**Before adding changes into git ***
> black <filepath>
> flake8 app/
# to reset the .pre-commit config
> rm -rf ~/.cache/pre-commit 

#Always to make new branch run git command before that
git checkout gp-development
git pull --rebase 
git stash (if error occurs, and perform pull rebase again)
git branch <your branch name>
git checkout <your branch name>
Make changes. Then
git add <filename with paths>
git commit -m "write your commit message"
git push origin branch_name
git revert -m 1 <commit hash>

#####
user: mkkhan
pass: rm7pWVa6g#f8

reset password here: https://prod-password-portal.integrichain.net/
rundeck login: https://self-service-portal.integrichain.net/user/login
use mkkhan@ichaininternal to reset
use mkkhan for rundeck login

####Runing unit Test ###########
depending on how you built your container you may not have the dev dependencies, but they can be install after the fact:
> docker exec -it icyte-sparc_app_1 pip install -r requirements-dev.txt
> docker exec -it icyte-sparc_app_1 py.test tests/common/
> docker exec -it icyte-sparc_app_1 py.test tests/gp/service/price_type/test_gp_price_type_service.py -k 'test_direct_sale_non_bonafide'

###To Rebuild container Image####
> docker-compose up --build

####
Thank you all! I really do appreciate the kind words and wishes. My almost 4 years here at IntegriChain has taught me so much and I will cherish the relationships that 
I was able to build here during my tenure. I am just as lucky to have met you! More than happy to stay connected! Please feel free to connect with me via linkedin or 
send me a line. My email is jasmine.skinnerd@gmail.com
####

#Code Execution Time
st = time.time()
et = time.time()
elapsed_time = et - st
print('Execution time1:', elapsed_time, 'seconds')

#dev
khalid/khalid123

#.execute(query)
-use execute if uses 'select' object into query
<sqlalchemy.engine.result.ResultProxy object at 0x7f93b2969f98>
#query.all()
-If we did not used select object into query then only use .all().


#qa
id: khalid
pass: khalid123
akshay/akshay
QA_Test_User_1/QATester1
QA_Test_User_2/QATester2
QA_Test_User_3/QATester3
#
pguser = "icyteapp"
pgpass = "UXr9uRhTsTHtskR5E8gY"
pghost = "qa-icyte-sparc-db.integrichain.net"
pgdb = "claims"

#uat
id: khalid
pass: khalidk123
Uid : qa_test
pass : Test123

#aws
12 digit id: integrichain
username: mkkhan
password: Chain@96$1#

#marshmallow
unknown=marshmallow.INCLUDE

#nameserver
ns120.herosite.pro
ns121.herosite.pro

#nameserver
ns1.bluehost.in
ns2.bluehost.in

#adp

#lapi
leewayz@n#1



//run front end:
before:
{   "/api": {
      "target": "http://localhost",
      "secure": false
     } 
}

live changes:

{   "/api": {
      "target": "http://localhost",
      "secure": false,
      "logLevel": "debug",
      "changeOrigin": true
     } 
}



#Release
- if hotfix:-
	-feature branch to Hotfix Branch (QA2) to UAT to PROD
- if Release:-
	-feature branch to development branch to release branch to QA to UAT to PROD

lib-pass:@Mission@.
router: radiance51586

#insta
pass: @mcc@5346
90 feet Road Tilak Nagar, Near Sakinaka Metro Station, Ghatkopar West
ess ADP:
pass:

#node
npm uninstall -g @angular/cli
npm cache clean
npm cache verify
npm install -g @angular/cli@wished.version.here

		
01. ls – The most frequently used command in Linux to list directories
02. pwd – Print working directory command in Linux
03. cd – Linux command to navigate through directories
04. mkdir – Command used to create directories in Linux
05. mv – Move or rename files in Linux
06. cp – Similar usage as mv but for copying files in Linux
07. rm – Delete files or directories
07. touch – Create blank/empty files
07. ln – Create symbolic links (shortcuts) to other files
08. cat – Display file contents on the terminal
09. clear – Clear the terminal display
10. echo – Print any text that follows the command
11. less – Linux command to display paged outputs in the terminal
12. man – Access manual pages for all Linux commands
13. uname – Linux command to get basic information about the OS
14. whoami – Get the active username
15. tar – Command to extract and compress files in Linux
16. grep – Search for a string within an output
17. head – Return the specified number of lines from the top
18. tail – Return the specified number of lines from the bottom
19. diff – Find the difference between two files
20. cmp – Allows you to check if two files are identical
21. comm – Combines the functionality of diff and cmp
22. sort – Linux command to sort the content of a file while outputting
23. export – Export environment variables in Linux
24. zip – Zip files in Linux
25. unzip – Unzip files in Linux
25. ssh – Secure Shell command in Linux
26. service – Linux command to start and stop services
27. ps – Display active processes
28. kill and killall – Kill active processes by process ID or name
29. df – Display disk filesystem information
30. mount – Mount file systems in Linux
31. chmod – Command to change file permissions
32. chown – Command for granting ownership of files or folders
33. ifconfig – Display network interfaces and IP addresses
34. traceroute – Trace all the network hops to reach the destination
35. wget – Direct download files from the internet
36. ufw – Firewall command
37. iptables – Base firewall for all other firewall utilities to interface with
38. apt, pacman, yum, rpm – Package managers depending on the distro
39. sudo – Command to escalate privileges in Linux
40. cal – View a command-line calendar
41. alias – Create custom shortcuts for your regularly used commands
42. dd – Majorly used for creating bootable USB sticks
43. whereis – Locate the binary, source, and manual pages for a command
44. whatis – Find what a command is used for
45. top – View active processes live with their system usage
46. useradd and usermod – Add new user or change existing users data
47. passwd – Create or update passwords for existing users


#WSL
wsl -l -v
wsl --shutdown
wsl --list
wsl --install
wsl --list --online
wsl --install -d <DistroName>
wsl --set-default-version 2

def create_db_uri(self):
        print("-------------------------SSSSSSSSSSSSSSSSSS--------------", os.getcwd())

        with open(os.path.abspath("logging_config.yml"), "r") as stream:
            print("********************************", stream.readlines())
        print("-------------------------XXXXXXXXXXXXXXXXXXXX")
        pguser = self._config.get("POSTGRES_USER", "")
        pgpass = self._config.get("POSTGRES_PASSWORD", "")
        pghost = self._config.get("POSTGRES_HOST", "")
        pgdb = self._config.get("POSTGRES_DB", "")

        pguser = "icyteapp"
        pgpass = "q2io8jwq3sIDD9Fv0199"
        pghost = "dev-icyte-sparc.cbptgzgybgnp.us-east-1.rds.amazonaws.com"
        pgdb = "claims"

        return "postgresql://{}:{}@{}/{}".format(pguser, pgpass, pghost, pgdb)
		
# pguser = "icyteapp"
# pgpass = "q2io8jwq3sIDD9Fv0199"
# pghost = "dev-icyte-rds.integrichain.net"
# pgdb = "claims"

# pguser = "icyteapp2"
# pgpass = "858RJ9CzdRhDTxUs"
# pghost = "qa-icyte-sparc-db.integrichain.net"
# pgdb = "claims"
		
Khalid, application will use refresh token to refresh the access token while application in use. Application will take user to SSO login if user being idle until session/access token times out.
Hope I answered your query

# Branching Model:
master

release/4....

qa2: manually deployment old methodology merge into qa2 
alembic version 

 Cannot create property 'undefined' on boolean 'false'
    at push../src/app/gp/components/price-type-comparison/price-type-comparison.component.ts.PriceTypeComparisonComponent.getRunPriceType2 (price-type-comparison.component.ts:74:57)


>mcc-demo-server
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


server {
        listen *:80 default_server;
        listen [::]:80 default_server;

        server_name web1.webdock.io;

        location / {
                root /var/www/html/web1.webdock.io/;
                index index.html;
        }
}


server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }

 
 
 # Credit request file runs every day at 6pm EST
    "credit_request_file": {
        "task": "app.cbk.services.credit.standard_request_job.standard_request_file",
        "schedule": crontab(hour=18, minute=0, nowfun=nowfunc),
    },

