op.drop_constraint(
        "chargeback_detail_distributor_id_fkey",
        table_name="chargeback_detail",
        schema="cbk",
        type_="foreignkey",
    )	

op.create_check_constraint(
	"formula_d_round_check",
	"formula",
	"d_round IN (2, 3, 4, 6, 7, 0)",
	schema="gp",
)

C:\Users\khanmoh\Documents\icyte-sparc\alembic\versions\b3f448a88a77_gp_649_modified_checkconstraint_of_.py


db.Index("ix_gp_bucket_detail_logic_slot_4_sel", "logic_slot4"),
db.Index("ix_gp_bucket_detail_logic_slot_5_sel", "logic_slot5"),
db.Index("ix_gp_bucket_detail_logic_slot4_r1_sel", "logic_slot4_ratio1"),
db.Index("ix_gp_bucket_detail_logic_slot5_r1_sel", "logic_slot5_ratio1"),


op.create_index('ix_gp_bucket_detail_logic_slot_4_sel', 'bucket_detail', ['logic_slot4'], unique=False, schema='gp')

op.drop_index(op.f('ix_gp_bucket_detail_logic_slot_4_sel'), table_name='bucket_detail', schema='gp')

op.add_column(
        "price_type",
        sa.Column("date_ds", sa.String(), server_default="period_date", nullable=False),
        schema="gp",
    )
	
op.drop_column("client_identifier", "client_identifier_name", schema="md")

"""testing1

Revision ID: 045607849aaf
Revises: b6b64b00a238
Create Date: 2022-12-06 19:12:03.625689

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '045607849aaf'
down_revision = 'b6b64b00a238'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_db():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_gp_otc_client_id', table_name='otc', schema='gp')
    op.drop_index('ix_gp_otc_id', table_name='otc', schema='gp')
    op.drop_index('ix_gp_otc_ndc11', table_name='otc', schema='gp')
    op.drop_index('otc_idx_sb_id_status', table_name='otc', schema='gp')
    op.drop_index('otc_idx_sb_id_version', table_name='otc', schema='gp')
    op.drop_table('otc', schema='gp')
    op.drop_table('user_resource_audit', schema='md')
    op.drop_index('ix_gp_data_validation_agg_period', table_name='data_validation_agg', schema='gp')
    op.drop_table('data_validation_agg', schema='gp')
    op.drop_table('term_rule', schema='md')
    op.drop_table('filetemplatemapping', schema='medi')
    op.drop_table('lambda_error', schema='md')
    op.drop_index('data_validation_idx_sb_id_status', table_name='data_validation', schema='gp')
    op.drop_index('ix_gp_data_validation_client_id', table_name='data_validation', schema='gp')
    op.drop_index('ix_gp_data_validation_join_id', table_name='data_validation', schema='gp')
    op.drop_index('ix_gp_data_validation_period', table_name='data_validation', schema='gp')
    op.drop_table('data_validation', schema='gp')
    op.drop_table('client_user_audit', schema='md')
    op.drop_index('ix_marketshare_detail_invoice_id', table_name='marketshare_detail', schema='mc')
    op.drop_table('marketshare_detail', schema='mc')
    op.drop_table('chargeback_header_file', schema='cbk')
    op.drop_table('user_permission', schema='md')
    op.drop_index('client_ndc11_init_ndc11_start_date_uniq', table_name='line_extension', schema='gp')
    op.drop_index('ix_gp_line_extension_client_id', table_name='line_extension', schema='gp')
    op.drop_index('ix_gp_line_extension_id', table_name='line_extension', schema='gp')
    op.drop_index('ix_gp_line_extension_ndc11', table_name='line_extension', schema='gp')
    op.drop_index('line_extension_idx_sb_id_status', table_name='line_extension', schema='gp')
    op.drop_index('line_extension_idx_sb_id_version', table_name='line_extension', schema='gp')
    op.drop_table('line_extension', schema='gp')
    op.drop_table('sparc_mc_trans_claim_num')
    op.drop_index('ix_redo_action_capture_id', table_name='redo_action')
    op.drop_index('ix_redo_action_stack_id', table_name='redo_action')
    op.drop_table('redo_action')
    op.drop_index('ix_medi_svt_staging_sparc_id', table_name='svt_staging', schema='medi')
    op.drop_table('svt_staging', schema='medi')
    op.drop_index('ix_marketshare_summary_invoice_id', table_name='marketshare_summary', schema='mc')
    op.drop_table('marketshare_summary', schema='mc')
    op.drop_table('chargeback_notes', schema='cbk')
    op.drop_table('term_customerlist', schema='md')
    op.drop_index('ix_marketshare_override_invoice_id', table_name='marketshare_override', schema='mc')
    op.drop_table('marketshare_override', schema='mc')
    op.drop_index('bundle_logic_idx_sb_id_status', table_name='bundle_logic', schema='gp')
    op.drop_index('bundle_logic_idx_sb_id_version', table_name='bundle_logic', schema='gp')
    op.drop_index('client_cont_id_cont_link_start_date_uniq', table_name='bundle_logic', schema='gp')
    op.drop_index('ix_gp_bundle_logic_client_id', table_name='bundle_logic', schema='gp')
    op.drop_index('ix_gp_bundle_logic_id', table_name='bundle_logic', schema='gp')
    op.drop_table('bundle_logic', schema='gp')
    op.drop_index('ix_undo_action_capture_id', table_name='undo_action')
    op.drop_index('ix_undo_action_stack_id', table_name='undo_action')
    op.drop_table('undo_action')
    op.drop_table('invoice_receipt_tracker', schema='medi')
    op.drop_table('svt_claim_num_sync')
    op.drop_table('user_permission_audit', schema='md')
    op.drop_index('ix_md_kickout_file_file_id', table_name='kickout_file', schema='md')
    op.drop_table('kickout_file', schema='md')
    op.drop_table('product_bkup_10282019', schema='md')
    op.drop_table('rebate_term_rule', schema='md')
    op.drop_table('archived_data_history', schema='md')
    op.drop_index('ix_md_annual_cpiu_id', table_name='annual_cpiu', schema='md')
    op.drop_index('year_uniq', table_name='annual_cpiu', schema='md')
    op.drop_table('annual_cpiu', schema='md')
    op.drop_index('bp_estimate_idx_sb_id_status', table_name='bp_estimate', schema='gp')
    op.drop_table('bp_estimate', schema='gp')
    op.drop_index('ix_cbk_customer_list_customer_customer_id', table_name='customer_list_customer', schema='cbk')
    op.drop_index('ix_cbk_customer_list_customer_customer_list_id', table_name='customer_list_customer', schema='cbk')
    op.drop_table('customer_list_customer', schema='cbk')
    op.drop_table('default_notes', schema='cbk')
    op.drop_table('data_transfer', schema='md')
    op.drop_index('validation_error_client_id_idx', table_name='validation_error', schema='cbk')
    op.drop_table('validation_error', schema='cbk')
    op.drop_table('importer_template_mapping', schema='md')
    op.drop_index('ix_medi_interest_orig_inv_id', table_name='interest', schema='medi')
    op.drop_index('ix_medi_interest_orig_sub_id', table_name='interest', schema='medi')
    op.drop_index('ix_medi_interest_orig_tid', table_name='interest', schema='medi')
    op.drop_index('ix_medi_interest_used_inv_id', table_name='interest', schema='medi')
    op.drop_index('ix_medi_interest_used_sub_id', table_name='interest', schema='medi')
    op.drop_index('ix_medi_interest_used_tid', table_name='interest', schema='medi')
    op.drop_table('interest', schema='medi')
    op.drop_table('data_validation_status', schema='gp')
    op.drop_table('override', schema='gp')
    op.drop_table('tbill_rate', schema='md')
    op.drop_table('customer_notes', schema='cbk')
    op.drop_table('client_identifier', schema='md')
    op.drop_index('cpiu_idx_sb_id_status', table_name='cpiu', schema='md')
    op.drop_index('period_uniq', table_name='cpiu', schema='md')
    op.drop_table('cpiu', schema='md')
    op.drop_table('customer_845_config', schema='cbk')
    op.drop_index('ix_cbk_customer_payment_info_customer_id', table_name='customer_payment_info', schema='cbk')
    op.drop_table('customer_payment_info', schema='cbk')
    op.drop_table('user_backup', schema='md')
    op.drop_table('cld_report_file', schema='medi')
    op.drop_table('rebate_term_customerlist', schema='md')
    op.drop_table('client_user', schema='md')
    op.alter_column('chargeback_detail', 'contract_number',
               existing_type=sa.VARCHAR(length=255),
               nullable=False,
               existing_comment='Customer-specific identifier referring to their contract.',
               schema='cbk')
    op.alter_column('chargeback_detail', 'debit_memo_number',
               existing_type=sa.VARCHAR(length=45),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_detail', 'invoice_number',
               existing_type=sa.VARCHAR(length=45),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_detail', 'product_identifier_value',
               existing_type=sa.VARCHAR(length=45),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_detail', 'ship_to_id',
               existing_type=sa.VARCHAR(length=45),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_detail', 'validation_status',
               existing_type=postgresql.ENUM('DRAFT', 'IN_PROGRESS', 'VALIDATED', 'PARTIAL_VALIDATED', 'VALIDATED_ERRORS', 'BLOCKED', 'CONFIRMED', 'IN_QUEUE', name='chargebackvalidationstatusenum'),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_header', 'debit_memo_number',
               existing_type=sa.VARCHAR(length=45),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_header', 'validation_status',
               existing_type=postgresql.ENUM('DRAFT', 'IN_PROGRESS', 'VALIDATED', 'PARTIAL_VALIDATED', 'VALIDATED_ERRORS', 'BLOCKED', 'CONFIRMED', 'IN_QUEUE', name='chargebackvalidationstatusenum'),
               nullable=False,
               schema='cbk')
    op.alter_column('client_validation', 'validation_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.drop_constraint('cot_client_id_fkey', 'cot', schema='cbk', type_='foreignkey')
    op.create_foreign_key(None, 'cot', 'client', ['client_id'], ['id'], source_schema='cbk', referent_schema='md')
    op.alter_column('customer', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.alter_column('customer', 'state',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("''::character varying"),
               schema='cbk')
    op.create_index(op.f('ix_cbk_customer_file_id'), 'customer', ['file_id'], unique=False, schema='cbk')
    op.create_index(op.f('ix_cbk_customer_file_line_id'), 'customer', ['file_line_id'], unique=False, schema='cbk')
    op.drop_index('ix_cbk_customer_client_id', table_name='customer', schema='cbk')
    op.drop_constraint('customer_modified_user_id_fkey', 'customer', schema='cbk', type_='foreignkey')
    op.create_foreign_key(None, 'customer', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md')
    op.alter_column('customer_identifier', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("'9999-12-31 00:00:00'::timestamp without time zone"),
               schema='cbk')
    op.alter_column('customer_identifier', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.drop_constraint('customer_identifier_modified_user_id_fkey', 'customer_identifier', schema='cbk', type_='foreignkey')
    op.create_foreign_key(None, 'customer_identifier', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md')
    op.alter_column('customer_identifier_staging', 'end_date',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("''::character varying"),
               schema='cbk')
    op.create_index(op.f('ix_cbk_customer_identifier_staging_customer_line_id'), 'customer_identifier_staging', ['customer_line_id'], unique=False, schema='cbk')
    op.create_index(op.f('ix_cbk_customer_identifier_staging_id_type'), 'customer_identifier_staging', ['id_type'], unique=False, schema='cbk')
    op.create_index(op.f('ix_cbk_customer_identifier_staging_identifier'), 'customer_identifier_staging', ['identifier'], unique=False, schema='cbk')
    op.create_index(op.f('ix_cbk_customer_identifier_staging_line_id'), 'customer_identifier_staging', ['line_id'], unique=False, schema='cbk')
    op.create_unique_constraint(None, 'customer_identifier_staging', ['file_id', 'line_id'], schema='cbk')
    op.alter_column('customer_list', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.create_index(op.f('ix_cbk_customer_list_name'), 'customer_list', ['name'], unique=False, schema='cbk')
    op.drop_constraint('customer_list_modified_user_id_fkey', 'customer_list', schema='cbk', type_='foreignkey')
    op.create_foreign_key(None, 'customer_list', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md')
    op.alter_column('customer_list_membership', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.create_unique_constraint('uniq_cbk_customer_list_customer', 'customer_list_membership', ['customer_list_id', 'customer_id'], schema='cbk')
    op.drop_constraint('uniq_cbk_customer_list_id_customer_id', 'customer_list_membership', schema='cbk', type_='unique')
    op.drop_constraint('customer_list_membership_modified_user_id_fkey', 'customer_list_membership', schema='cbk', type_='foreignkey')
    op.create_foreign_key(None, 'customer_list_membership', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md')
    op.alter_column('customer_relationship', 'child_customer_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.alter_column('customer_relationship', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.alter_column('customer_relationship', 'parent_customer_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='cbk')
    op.drop_constraint('customer_relationship_modified_user_id_fkey', 'customer_relationship', schema='cbk', type_='foreignkey')
    op.create_foreign_key(None, 'customer_relationship', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md')
    op.create_index(op.f('ix_cbk_customer_staging_line_id'), 'customer_staging', ['line_id'], unique=False, schema='cbk')
    op.create_unique_constraint(None, 'customer_staging', ['file_id', 'line_id'], schema='cbk')
    op.alter_column('bucket_detail', 'discount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               nullable=False,
               schema='gp')
    op.drop_index('bucket_detail_pkey', table_name='bucket_detail', schema='gp')
    op.drop_index('gp_cbk_bt_num_idx', table_name='chargeback', schema='gp')
    op.drop_index('gp_cbk_client_id', table_name='chargeback', schema='gp')
    op.drop_index('gp_cbk_st_num_idx', table_name='chargeback', schema='gp')
    op.drop_index('gp_cbk_status_idx', table_name='chargeback', schema='gp')
    op.drop_index('ix_gp_chargeback_client_status', table_name='chargeback', schema='gp')
    op.alter_column('customer_product_cppd', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('gp.customer_product_cppd_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('customer_product_cppd', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='gp')
    op.create_index('customer_product_cppd_idx_sb_id_status', 'customer_product_cppd', ['sb_id', 'status'], unique=True, schema='gp', sqlite_where=sa.text("status != 'SUPERCEDED'"), postgresql_where=sa.text("status != 'SUPERCEDED'"))
    op.drop_index('cust_prod_cppd_idx_sb_id_status', table_name='customer_product_cppd', schema='gp')
    op.drop_index('cust_prod_cppd_idx_sb_id_version', table_name='customer_product_cppd', schema='gp')
    op.create_unique_constraint(None, 'customer_product_cppd', ['sb_id', 'version'], schema='gp')
    op.drop_constraint('customer_product_cppd_approved_by_fkey', 'customer_product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint('customer_product_cppd_modified_by_fkey', 'customer_product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint('customer_product_cppd_client_id_fkey', 'customer_product_cppd', schema='gp', type_='foreignkey')
    op.create_foreign_key(None, 'customer_product_cppd', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md')
    op.create_foreign_key(None, 'customer_product_cppd', 'user', ['modified_by'], ['id'], source_schema='gp', referent_schema='md')
    op.create_foreign_key(None, 'customer_product_cppd', 'client', ['client_id'], ['id'], source_schema='gp', referent_schema='md')
    op.drop_index('ix_gp_direct_sale_client_status', table_name='direct_sale', schema='gp')
    op.alter_column('historic_pricing', 'end_date',
               existing_type=sa.DATE(),
               comment='Period end of price',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('gp.historic_pricing_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('historic_pricing', 'period_type',
               existing_type=sa.VARCHAR(length=1),
               comment='Period Type: M-Monthly, Q-Quarterly, A-Annually, U-User Defined',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'price_type',
               existing_type=sa.VARCHAR(),
               comment='Price Type: WAC, AMP, BP, RPU, etc.',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('gp.historic_pricing_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('historic_pricing', 'start_date',
               existing_type=sa.DATE(),
               comment='Period start of price',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='gp')
    op.alter_column('historic_pricing', 'unit_price_ndc11',
               existing_type=sa.NUMERIC(precision=16, scale=6),
               comment='Unit price at NDC11',
               existing_nullable=False,
               existing_server_default=sa.text("'0'::numeric"),
               schema='gp')
    op.create_index('historic_pricing_idx_sb_id_status', 'historic_pricing', ['sb_id', 'status'], unique=True, schema='gp', sqlite_where=sa.text("status != 'SUPERCEDED'"), postgresql_where=sa.text("status != 'SUPERCEDED'"))
    op.drop_index('historic_pricing_sb_id_status', table_name='historic_pricing', schema='gp')
    op.drop_index('historic_pricing_sb_id_version', table_name='historic_pricing', schema='gp')
    op.drop_index('ix_gp_historic_pricing_client_id', table_name='historic_pricing', schema='gp')
    op.drop_index('ix_gp_historic_pricing_id', table_name='historic_pricing', schema='gp')
    op.create_unique_constraint(None, 'historic_pricing', ['sb_id', 'version'], schema='gp')
    op.drop_constraint('historic_pricing_client_id_fkey', 'historic_pricing', schema='gp', type_='foreignkey')
    op.drop_constraint('historic_pricing_modified_by_fkey', 'historic_pricing', schema='gp', type_='foreignkey')
    op.drop_constraint('historic_pricing_approved_by_fkey', 'historic_pricing', schema='gp', type_='foreignkey')
    op.create_foreign_key(None, 'historic_pricing', 'client', ['client_id'], ['id'], source_schema='gp', referent_schema='md')
    op.create_foreign_key(None, 'historic_pricing', 'user', ['modified_by'], ['id'], source_schema='gp', referent_schema='md')
    op.create_foreign_key(None, 'historic_pricing', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md')
    op.drop_index('ix_gp_nominal_price_id', table_name='nominal_price', schema='gp')
    op.alter_column('price_type', 'include_chargeback',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='gp')
    op.alter_column('product_cppd', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('gp.product_cppd_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('product_cppd', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='gp')
    op.drop_index('ix_gp_product_cppd_ndc11', table_name='product_cppd', schema='gp')
    op.drop_index('product_cppd_idx_sb_id_version', table_name='product_cppd', schema='gp')
    op.create_unique_constraint(None, 'product_cppd', ['sb_id', 'version'], schema='gp')
    op.drop_constraint('product_cppd_client_id_fkey', 'product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint('product_cppd_approved_by_fkey', 'product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint('product_cppd_modified_by_fkey', 'product_cppd', schema='gp', type_='foreignkey')
    op.create_foreign_key(None, 'product_cppd', 'client', ['client_id'], ['id'], source_schema='gp', referent_schema='md')
    op.create_foreign_key(None, 'product_cppd', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md')
    op.create_foreign_key(None, 'product_cppd', 'user', ['modified_by'], ['id'], source_schema='gp', referent_schema='md')
    op.alter_column('rebate', 'source',
               existing_type=sa.VARCHAR(),
               comment='used to track source of manually uploaded data',
               existing_nullable=False,
               existing_server_default=sa.text("''::character varying"),
               schema='gp')
    op.alter_column('rebate', 'svt_line_id',
               existing_type=sa.INTEGER(),
               comment='svt_line_id from UBR used to group original and credit transactions',
               existing_nullable=True,
               schema='gp')
    op.drop_index('ix_gp_rebate_client_status', table_name='rebate', schema='gp')
    op.alter_column('run_attachment', 'link',
               existing_type=sa.VARCHAR(),
               comment='Attachment linked to run/run_price_type/job',
               existing_comment='Attachment linked to run/run_price_type',
               existing_nullable=False,
               existing_server_default=sa.text("'run'::character varying"),
               schema='gp')
    op.alter_column('run_attachment', 'ref_id',
               existing_type=sa.INTEGER(),
               comment='Primary key value of run/run_price_type/job',
               existing_comment='Primary key value of run/run_price_type',
               existing_nullable=False,
               schema='gp')
    op.alter_column('validation_join', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='gp')
    op.alter_column('validation_join', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('gp.validation_join_id_seq'::regclass)"),
               schema='gp')
    op.create_index('client_id_target_id_alias_source_key', 'validation_join', ['client_id', 'target_id', 'alias', 'source'], unique=True, schema='gp', sqlite_where=sa.text("status = 'ACTIVE'"), postgresql_where=sa.text("status = 'ACTIVE'"))
    op.drop_index('validation_join_client_id_target_id_alias_source_key', table_name='validation_join', schema='gp')
    op.drop_index('validation_join_sb_id_version', table_name='validation_join', schema='gp')
    op.create_unique_constraint(None, 'validation_join', ['sb_id', 'version'], schema='gp')
    op.drop_constraint('validation_join_approved_by_fkey', 'validation_join', schema='gp', type_='foreignkey')
    op.create_foreign_key(None, 'validation_join', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md')
    op.alter_column('conditions', 'rebate_condition_id',
               existing_type=sa.INTEGER(),
               comment='Contact Rebate Condition ID',
               existing_nullable=False,
               schema='mc')
    op.alter_column('conditions_config', 'cond_code',
               existing_type=sa.VARCHAR(),
               comment='Condition Code',
               existing_nullable=False,
               schema='mc')
    op.alter_column('conditions_config', 'cond_val',
               existing_type=sa.VARCHAR(),
               comment='Condition Value',
               existing_nullable=False,
               schema='mc')
    op.alter_column('conditions_config', 'cond_val_code',
               existing_type=sa.INTEGER(),
               comment='Condition Value Code',
               existing_nullable=True,
               schema='mc')
    op.drop_constraint('cond_option_uk', 'conditions_config', schema='mc', type_='unique')
    op.drop_constraint('cond_option_uk2', 'conditions_config', schema='mc', type_='unique')
    op.alter_column('contract_header', 'client_id',
               existing_type=sa.INTEGER(),
               comment='Client ID foreign key',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_header', 'contract_type',
               existing_type=postgresql.ENUM('MANAGED_CARE', 'TRICARE', 'COVERAGE_GAP', name='ubrcontracttype'),
               nullable=True,
               existing_server_default=sa.text("'MANAGED_CARE'::ubrcontracttype"),
               schema='mc')
    op.alter_column('contract_header', 'customer_id',
               existing_type=sa.INTEGER(),
               comment='Customer ID foreign key for contracted customer',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_header', 'days_to_submit',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'),
               schema='mc')
    op.alter_column('contract_header', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('contract_header', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.alter_column('contract_header', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('mc.contract_header_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_header', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.create_index('contract_header_idx_sb_id_status', 'contract_header', ['sb_id', 'status'], unique=True, schema='mc', sqlite_where=sa.text("status != 'SUPERCEDED'"), postgresql_where=sa.text("status != 'SUPERCEDED'"))
    op.drop_index('ch_idx_sb_id_status', table_name='contract_header', schema='mc')
    op.drop_index('ch_idx_sb_id_version', table_name='contract_header', schema='mc')
    op.create_unique_constraint(None, 'contract_header', ['sb_id', 'version'], schema='mc')
    op.drop_constraint('contract_header_approved_by_fkey', 'contract_header', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'contract_header', 'user', ['approved_by'], ['id'], source_schema='mc', referent_schema='md')
    op.alter_column('contract_plan_list', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contract Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'effective_date',
               existing_type=sa.DATE(),
               comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'expiration_date',
               existing_type=sa.DATE(),
               comment='Plan List Expiration Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.contract_plan_list_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_plan_list', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_plan_list', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_plan_list_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_plan_list', 'plan_list_id',
               existing_type=sa.INTEGER(),
               comment='Contract Plan List Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.drop_constraint('contract_plan_list_contract_id_fkey', 'contract_plan_list', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'contract_plan_list', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc', ondelete='CASCADE')
    op.alter_column('contract_plans', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contract Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'contract_plan_list_id',
               existing_type=sa.INTEGER(),
               comment='Contract Plan List Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'customer_id',
               existing_type=sa.INTEGER(),
               comment='Plans to Customer Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'effective_date',
               existing_type=sa.DATE(),
               comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'expiration_date',
               existing_type=sa.DATE(),
               comment='Plan List Expiration Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.contract_plans_id_seq'::regclass)"),
               schema='mc')
    op.drop_constraint('contract_plans_contract_id_fkey', 'contract_plans', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'contract_plans', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc', ondelete='CASCADE')
    op.alter_column('contract_pp_condition', 'rebate_condition_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.alter_column('contract_pp_condition', 'rebate_pp_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.drop_index('ix_mc_contract_pp_condition_unique', table_name='contract_pp_condition', schema='mc')
    op.alter_column('contract_pp_prior_violations', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contract Header Reference Key',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_pp_prior_violations', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.drop_index('ix_mc_contract_pp_prior_violations_contract_id', table_name='contract_pp_prior_violations', schema='mc')
    op.drop_constraint('contract_pp_prior_violations_contract_id_fkey', 'contract_pp_prior_violations', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'contract_pp_prior_violations', 'user', ['modified_user_id'], ['id'], source_schema='mc', referent_schema='md')
    op.alter_column('contract_product', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contract Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'current_wac',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment='Contract Product Current WAC',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_product', 'effective_date',
               existing_type=sa.DATE(),
               comment='Contract Product Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'expiration_date',
               existing_type=sa.DATE(),
               comment='Contract Product Expiration Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.contract_product_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_product', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_product', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_product_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_product', 'product_id',
               existing_type=sa.INTEGER(),
               comment='Product Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.drop_constraint('contract_product_contract_id_fkey', 'contract_product', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'contract_product', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc', ondelete='CASCADE')
    op.alter_column('contract_rebate_conditions', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebate_conditions_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'orig_rebate_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'rebate_id',
               existing_type=sa.INTEGER(),
               comment='Contact Rebate ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contact ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebate_minimum_amounts_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebate_tier', 'rebate_condition_id',
               existing_type=sa.INTEGER(),
               comment='Contract Rebate Condition ID Reference',
               existing_nullable=True,
               schema='mc')
    op.drop_constraint('contract_rebate_tier_unique_key', 'contract_rebate_tier', schema='mc', type_='unique')
    op.alter_column('contract_rebates', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contact ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebates', 'evaluate_only',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='mc')
    op.alter_column('contract_rebates', 'has_overrides',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='mc')
    op.alter_column('contract_rebates', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebates', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebates_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebates', 'price_date',
               existing_type=sa.VARCHAR(length=35),
               nullable=False,
               schema='mc')
    op.alter_column('contract_rebates', 'price_method',
               existing_type=sa.VARCHAR(length=35),
               nullable=False,
               schema='mc')
    op.alter_column('contract_rebates', 'rebate',
               existing_type=sa.NUMERIC(precision=13, scale=6),
               nullable=False,
               schema='mc')
    op.alter_column('contract_rebates', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'condition_required',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'N'::character varying"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contact ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebates_pp', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebates_pp', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebates_pp_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'pct_based',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'N'::character varying"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.create_index(op.f('ix_mc_credit_credit_type'), 'credit', ['credit_type'], unique=False, schema='mc')
    op.alter_column('exclusions_transactions', 'flag_active',
               existing_type=sa.BOOLEAN(),
               comment='Product Active Status - True for Active Products',
               existing_nullable=False,
               existing_server_default=sa.text('true'),
               schema='mc')
    op.drop_constraint('exclusions_transactions_transaction_id_fkey', 'exclusions_transactions', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'exclusions_transactions', 'transaction', ['transaction_id'], ['id'], source_schema='mc', referent_schema='mc')
    op.alter_column('invoice', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.create_index(op.f('ix_mc_invoice_submission_type'), 'invoice', ['submission_type'], unique=False, schema='mc')
    op.create_foreign_key(None, 'invoice', 'invoice', ['invoice_to_apply'], ['id'], source_schema='mc', referent_schema='mc')
    op.drop_index('invoice_file_invoice_id_idx', table_name='invoice_file', schema='mc')
    op.drop_index('invoice_file_mc_filetemplate_mapping_id_idx', table_name='invoice_file', schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'last_error',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'last_processed',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'source',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'template_sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.drop_index('mc_filetemplate_mapping_uniq', table_name='mc_filetemplate_mapping', schema='mc')
    op.drop_column('mc_filetemplate_mapping', 'additional_filter', schema='mc')
    op.alter_column('override_rule', 'contract_id',
               existing_type=sa.INTEGER(),
               comment='Contract ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('override_rule', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('override_rule', 'orig_id',
               existing_type=sa.INTEGER(),
               comment='Original ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('payment_tracker', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.alter_column('payment_tracker', 'paid_amount',
               existing_type=sa.NUMERIC(precision=14, scale=2),
               nullable=False,
               schema='mc')
    op.alter_column('payment_tracker', 'tracker_configuration_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.drop_constraint('payment_tracker_modified_user_id_fkey', 'payment_tracker', schema='mc', type_='foreignkey')
    op.drop_constraint('payment_tracker_tracker_configuration_id_fkey', 'payment_tracker', schema='mc', type_='foreignkey')
    op.create_foreign_key(None, 'payment_tracker', 'user', ['modified_user_id'], ['id'], source_schema='mc', referent_schema='md')
    op.alter_column('payment_tracker_configuration', 'contract_end_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'contract_start_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'days_to_pay',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'days_to_submit',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.create_foreign_key(None, 'payment_tracker_configuration', 'user', ['modified_user_id'], ['id'], source_schema='mc', referent_schema='md')
    op.create_unique_constraint(None, 'payment_tracker_meta', ['data_type', 'data_value'], schema='mc')
    op.alter_column('plan_list', 'client_id',
               existing_type=sa.INTEGER(),
               comment='Client ID foreign key. Will be null if plan is GLOBAL',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'customer_id',
               existing_type=sa.INTEGER(),
               comment='Customer ID foreign key.TODO',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'flag_global',
               existing_type=sa.VARCHAR(length=1),
               comment='Y as Global and N is Local',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.plan_list_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('plan_list', 'list_end_date',
               existing_type=sa.DATE(),
               comment='Plan List End Date',
               existing_nullable=False,
               existing_server_default=sa.text("'2099-12-31'::date"),
               schema='mc')
    op.alter_column('plan_list', 'list_start_date',
               existing_type=sa.DATE(),
               comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plan_list', 'plan_list_name',
               existing_type=sa.VARCHAR(length=40),
               comment='Plan List Name',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plan_list', 'status',
               existing_type=sa.VARCHAR(length=10),
               comment='Status i.e. Active/Inactive',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plans', 'customer_id',
               existing_type=sa.INTEGER(),
               comment='Customer ID foreign key',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plans', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.plans_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('plans', 'plan_end_date',
               existing_type=sa.DATE(),
               comment='Plan List End Date',
               existing_nullable=False,
               existing_server_default=sa.text("'2099-12-31'::date"),
               schema='mc')
    op.alter_column('plans', 'plan_list_id',
               existing_type=sa.INTEGER(),
               comment='Plan List ID foreign key',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plans', 'plan_start_date',
               existing_type=sa.DATE(),
               comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('settlement', 'payment_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='mc')
    op.alter_column('stage_transaction', 'summary_line_number',
               existing_type=sa.VARCHAR(),
               comment='cn_line_number',
               existing_comment='cn_file_name',
               existing_nullable=True,
               schema='mc')
    op.create_index(op.f('ix_mc_stage_transaction_row_type'), 'stage_transaction', ['row_type'], unique=False, schema='mc')
    op.alter_column('transaction', 'chain_prior_id',
               existing_type=sa.INTEGER(),
               comment='Self reference to Transaction ID to its prior resub/orig line',
               existing_comment='Self reference to Transaction ID of its prior resub/orig line',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='mc')
    op.alter_column('transaction', 'credit_amt',
               existing_type=sa.NUMERIC(precision=18, scale=6),
               nullable=False,
               schema='mc')
    op.alter_column('transaction', 'credit_amt_applied',
               existing_type=sa.NUMERIC(precision=18, scale=6),
               nullable=False,
               schema='mc')
    op.alter_column('transaction', 'summary_line_number',
               existing_type=sa.VARCHAR(),
               comment='cn_line_number',
               existing_comment='cn_file_name',
               existing_nullable=True,
               schema='mc')
    op.create_index(op.f('ix_mc_transaction_row_type'), 'transaction', ['row_type'], unique=False, schema='mc')
    op.create_index(op.f('ix_mc_transaction_transaction_type'), 'transaction', ['transaction_type'], unique=False, schema='mc')
    op.alter_column('transaction_override', 'flag_applied',
               existing_type=sa.BOOLEAN(),
               comment='True when this override rule is applied to the transaction',
               existing_nullable=False,
               existing_server_default=sa.text('true'),
               schema='mc')
    op.alter_column('transaction_override', 'type',
               existing_type=sa.VARCHAR(),
               comment='original/override',
               existing_nullable=False,
               existing_server_default=sa.text("'override'::character varying"),
               schema='mc')
    op.drop_index('transaction_override_transaction_id_idx', table_name='transaction_override', schema='mc')
    op.drop_constraint('approval_modified_by_fkey', 'approval', schema='md', type_='foreignkey')
    op.drop_constraint('approval_approved_by_fkey', 'approval', schema='md', type_='foreignkey')
    op.drop_constraint('approval_client_id_fkey', 'approval', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'approval', 'user', ['modified_by'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key(None, 'approval', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key(None, 'approval', 'client', ['client_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('client', 'bypass_approvals',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.drop_index('client_name_idx', table_name='client', schema='md')
    op.create_unique_constraint(None, 'client', ['name'], schema='md')
    op.drop_column('client', 'login', schema='md')
    op.alter_column('client_service', 'chargeback_transfer',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'cld_validation',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='md')
    op.alter_column('client_service', 'portal_covgap',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'portal_ind',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'portal_managed_care',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'),
               schema='md')
    op.alter_column('client_service', 'portal_tricare',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'rebate_transfer',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service_845_config', 'client_service_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('contract', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('contract', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('contract', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='md')
    op.drop_index('contract_idx_sb_id_version', table_name='contract', schema='md')
    op.drop_constraint('contract_approved_by_fkey', 'contract', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'contract', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md')
    op.drop_column('contract', 'update_dates', schema='md')
    op.alter_column('contract_product', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_product', 'orig_id',
               existing_type=sa.INTEGER(),
               comment='Original ID',
               existing_nullable=True,
               existing_server_default=sa.text("currval('md.contract_product_id_seq'::regclass)"),
               schema='md')
    op.alter_column('contract_product', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='Product Reference',
               schema='md')
    op.alter_column('contract_product', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='md')
    op.alter_column('contract_term_condition', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_term_condition', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('md.contract_conditions_id_seq'::regclass)"),
               schema='md')
    op.alter_column('contract_term_condition', 'orig_rate_id',
               existing_type=sa.INTEGER(),
               comment='Original Term ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_term_condition', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='md')
    op.alter_column('contract_term_pricing', 'orig_id',
               existing_type=sa.INTEGER(),
               comment='Original ID',
               existing_nullable=True,
               existing_server_default=sa.text("currval('md.contract_term_pricing_id_seq'::regclass)"),
               schema='md')
    op.alter_column('contract_term_pricing', 'orig_term_id',
               existing_type=sa.INTEGER(),
               comment='Original Term ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_term_pricing', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.alter_column('contract_terms', 'bfsf',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='md')
    op.alter_column('contract_terms', 'data_level',
               existing_type=postgresql.ENUM('AGGREGATE', 'MEMBER', 'PARENT', name='commoncontractdatalevelenum'),
               nullable=True,
               schema='md')
    op.alter_column('contract_terms', 'data_source',
               existing_type=postgresql.ENUM('DIRECT_SALES', 'CHARGEBACKS', 'BOTH', name='commoncontractdatasourceenum'),
               nullable=True,
               schema='md')
    op.alter_column('contract_terms', 'lop_loc_ind',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='md')
    op.alter_column('contract_terms', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_terms', 'orig_id',
               existing_type=sa.INTEGER(),
               comment='Original ID',
               existing_nullable=True,
               schema='md')
    op.drop_column('contract_terms', 'effective_date', schema='md')
    op.alter_column('contract_wholesaler', 'days_delay',
               existing_type=sa.INTEGER(),
               comment='Days Delay',
               existing_nullable=True,
               schema='md')
    op.drop_constraint('customer_client_id_fkey', 'customer', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'customer', 'client', ['client_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('file', 'deleted',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('file', 'full_refresh',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('file', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('md.file_id_seq'::regclass)"),
               schema='md')
    op.alter_column('file', 'processing_time',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('file', 'validated',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='md')
    op.alter_column('file_template_break', 'filetemplate_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.create_unique_constraint(None, 'file_template_break', ['filetemplate_id', 'pos'], schema='md')
    op.create_unique_constraint(None, 'file_template_column', ['filetemplate_id', 'name'], schema='md')
    op.create_unique_constraint(None, 'file_template_column', ['filetemplate_id', 'ordering'], schema='md')
    op.drop_constraint('file_validation_file_id_fkey', 'file_validation', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'file_validation', 'file', ['file_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.alter_column('filetemplate', 'custom_logic',
               existing_type=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("''::text"),
               schema='md')
    op.alter_column('filetemplate', 'includes_header',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='md')
    op.alter_column('filetemplate', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('filetemplate', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('md.filetemplate_id_seq'::regclass)"),
               schema='md')
    op.alter_column('filetemplate', 'sheet_excluder',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='md')
    op.alter_column('filetemplate', 'skip_cols',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'),
               schema='md')
    op.alter_column('filetemplate', 'use_custom_logic',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.create_index('filetemplate_name_key', 'filetemplate', ['name'], unique=True, schema='md', sqlite_where=sa.text("status = 'ACTIVE'"), postgresql_where=sa.text("status = 'ACTIVE'"))
    op.drop_index('filetemplate_sb_id_version', table_name='filetemplate', schema='md')
    op.create_unique_constraint(None, 'filetemplate', ['sb_id', 'version'], schema='md')
    op.drop_constraint('filetemplate_approved_by_fkey', 'filetemplate', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'filetemplate', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md')
    op.drop_constraint('filetemplate_file_filetemplate_id_fkey', 'filetemplate_file', schema='md', type_='foreignkey')
    op.drop_constraint('filetemplate_file_file_id_fkey', 'filetemplate_file', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'filetemplate_file', 'filetemplate', ['filetemplate_id'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key(None, 'filetemplate_file', 'file', ['file_id'], ['id'], source_schema='md', referent_schema='md')
    op.drop_column('filetemplate_file', 'id', schema='md')
    op.alter_column('job', 'status',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('note', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('md.note_id_seq'::regclass)"),
               schema='md')
    op.alter_column('note', 'link',
               existing_type=sa.VARCHAR(),
               comment='Note linked to invoice/submission/transaction',
               existing_nullable=False,
               existing_server_default=sa.text("'invoice'::character varying"),
               schema='md')
    op.alter_column('note', 'ref_id',
               existing_type=sa.INTEGER(),
               comment='Primary key value of linked table',
               existing_nullable=False,
               schema='md')
    op.alter_column('note', 'type',
               existing_type=sa.VARCHAR(),
               comment='Note Type: Recon/Approval/External',
               existing_nullable=False,
               schema='md')
    op.alter_column('payment_portal', 'payment_paid',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('payment_portal', 'payment_sent',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('payment_portal', 'portal_rejected',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.create_foreign_key(None, 'payment_portal', 'service', ['service_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.alter_column('perf_event', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               schema='md')
    op.alter_column('price_calc_logic', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('price_calc_logic', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.alter_column('price_calc_logic', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('md.price_calc_logic_id_seq'::regclass)"),
               schema='md')
    op.alter_column('price_calc_logic', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.drop_index('logic_idx_sb_id_status', table_name='price_calc_logic', schema='md')
    op.drop_index('logic_idx_sb_id_version', table_name='price_calc_logic', schema='md')
    op.drop_constraint('price_calc_logic_approved_by_fkey', 'price_calc_logic', schema='md', type_='foreignkey')
    op.drop_constraint('price_calc_logic_price_type_id_fkey', 'price_calc_logic', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'price_calc_logic', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key(None, 'price_calc_logic', 'price_type', ['price_type_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('price_calc_result', 'logic_id',
               existing_type=sa.INTEGER(),
               comment='Price Calc Logic (sb_id) Reference',
               existing_nullable=False,
               schema='md')
    op.alter_column('price_type', 'price_type',
               existing_type=sa.VARCHAR(),
               comment='Price Type: WAC, AMP, BP, RPU, etc.',
               existing_nullable=False,
               schema='md')
    op.drop_index('price_type_product_attr_start_date_idx', table_name='price_type_attribute', schema='md')
    op.create_unique_constraint('price_type_product_attr_start_date_idx', 'price_type_attribute', ['price_type_id', 'product_id', 'client_id', 'attribute', 'start_date'], schema='md')
    op.alter_column('pricing', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('pricing', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.alter_column('pricing', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('md.pricing_id_seq'::regclass)"),
               schema='md')
    op.alter_column('pricing', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.create_index('pricing_idx_sb_id_status', 'pricing', ['sb_id', 'status'], unique=True, schema='md', sqlite_where=sa.text("status != 'SUPERCEDED'"), postgresql_where=sa.text("status != 'SUPERCEDED'"))
    op.create_unique_constraint(None, 'pricing', ['sb_id', 'version'], schema='md')
    op.drop_constraint('pricing_approved_by_fkey', 'pricing', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'pricing', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('pricing_difference', 'executed_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('pricing_difference', 'execution_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='md')
    op.alter_column('pricing_difference', 'file_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.drop_constraint('pricing_difference_fk', 'pricing_difference', schema='md', type_='foreignkey')
    op.drop_constraint('pricing_difference_fk_1', 'pricing_difference', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'pricing_difference', 'file', ['file_id'], ['id'], source_schema='md', referent_schema='md', ondelete='cascade')
    op.create_foreign_key(None, 'pricing_difference', 'user', ['executed_by'], ['id'], source_schema='md', referent_schema='md', ondelete='cascade')
    op.alter_column('pricing_difference_detail', 'pricing_difference_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('pricing_difference_detail', 'row_number',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.drop_constraint('pricing_difference_detail_fk', 'pricing_difference_detail', schema='md', type_='foreignkey')
    op.drop_constraint('pricing_difference_detail_fk_1', 'pricing_difference_detail', schema='md', type_='foreignkey')
    op.drop_constraint('pricing_difference_detail_fk_2', 'pricing_difference_detail', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'pricing_difference_detail', 'pricing_difference', ['pricing_difference_id'], ['id'], source_schema='md', referent_schema='md', ondelete='cascade')
    op.create_foreign_key(None, 'pricing_difference_detail', 'product', ['product_id'], ['id'], source_schema='md', referent_schema='md', ondelete='cascade')
    op.create_foreign_key(None, 'pricing_difference_detail', 'pricing', ['pricing_id'], ['id'], source_schema='md', referent_schema='md', ondelete='cascade')
    op.alter_column('product', 'amp_type',
               existing_type=sa.VARCHAR(length=10),
               nullable=False,
               comment=None,
               existing_comment='5i/5i_always/RCP Indicator',
               existing_server_default=sa.text("'5I'::character varying"),
               schema='md')
    op.alter_column('product', 'auto_add_product',
               existing_type=sa.BOOLEAN(),
               comment='Flag to indicate if this product auto inserts into mandatory programs',
               existing_nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'elig_end_date',
               existing_type=sa.DATE(),
               comment='Medicaid Eligibility End Date',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'elig_start_date',
               existing_type=sa.DATE(),
               comment='Medicaid Eligibility Start Date',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'fda_application_number',
               existing_type=sa.VARCHAR(length=50),
               comment='FDA Application Number',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'flag_amp',
               existing_type=sa.BOOLEAN(),
               comment='AMP Eligibility',
               existing_nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'flag_bp',
               existing_type=sa.BOOLEAN(),
               comment='Best Price Eligibility',
               existing_nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'internal',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'),
               schema='md')
    op.alter_column('product', 'jcode',
               existing_type=sa.VARCHAR(),
               comment='JCode',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'max_daycon_ubr',
               existing_type=sa.NUMERIC(precision=14, scale=3),
               comment='Maximum daily consumption',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'max_days_supply',
               existing_type=sa.INTEGER(),
               comment='Maximum days supply',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'medicaid_uom',
               existing_type=sa.VARCHAR(),
               comment='Medicaid Unit of Measure',
               existing_nullable=False,
               existing_server_default=sa.text("'TAB'::character varying"),
               schema='md')
    op.alter_column('product', 'min_daycon_ubr',
               existing_type=sa.NUMERIC(precision=14, scale=3),
               comment='Minimum daily consumption',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'min_days_supply',
               existing_type=sa.INTEGER(),
               comment='Minimum days supply',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('product', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.alter_column('product', 'reportable_amp',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='AMP Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_asp',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='GP ASP Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_bp',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Best Price Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_iff',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='IFF Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_nfamp',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='GP NFAMP Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('md.product_id_seq'::regclass)"),
               schema='md')
    op.alter_column('product', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.alter_column('product', 'unit_conversion_factor',
               existing_type=sa.NUMERIC(precision=13, scale=3),
               comment=None,
               existing_comment='Unit Conversion Factor - SALE_UOM to UNIT_UOM',
               existing_nullable=False,
               schema='md')
    op.create_index('product_ndc11_uniq', 'product', ['client_id', 'ndc11'], unique=True, schema='md', sqlite_where=sa.text("status = 'ACTIVE'"), postgresql_where=sa.text("status = 'ACTIVE'"))
    op.drop_index('product_client_id_ndc11_key', table_name='product', schema='md')
    op.drop_index('product_idx_sb_id_version', table_name='product', schema='md')
    op.create_unique_constraint(None, 'product', ['sb_id', 'version'], schema='md')
    op.drop_constraint('product_approved_by_fkey', 'product', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'product', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md')
    op.drop_column('product', 'calc_type', schema='md')
    op.alter_column('product_group', 'end_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='md')
    op.alter_column('product_group', 'start_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='md')
    op.drop_constraint('product_group_item_product_id_fkey', 'product_group_item', schema='md', type_='foreignkey')
    op.drop_constraint('product_labeler_client_id_fkey', 'product_labeler', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'product_labeler', 'client', ['client_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('resource', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='md')
    op.alter_column('resource', 'pretty_name',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='md')
    op.alter_column('resource', 'resource_tag_id',
               existing_type=postgresql.ENUM('MD_VIEW_USER', 'MD_EDIT_USER', 'MD_ADD_USER', 'MD_ADD_CLIENT', 'MD_DELETE_CLIENT', 'MD_EXECUTE_SUPPORT_ACTION', 'MD_ADD_CUSTOMER', 'MD_VIEW_PRICING', 'MD_ADD_PRICING', 'MD_ADD_PRODUCT', 'MD_EDIT_PRICING', 'MD_REVIEW_AND_APPROVE', 'MD_EDIT_CLIENTS', 'MD_EDIT_PRODUCT', 'MD_VIEW_PRODUCT', 'MD_VIEW_CUSTOMER', 'MD_EDIT_CUSTOMER', 'MD_DELETE_CUSTOMER', 'MEDI_SEND_TO_PAYMENT', 'MEDI_APPROVE_REPORT', 'MEDI_PAYMENT_TRACKER', 'MEDI_PAYMENT_TRACKER_ADMIN', 'MEDI_PAYMENT_TRACKER_MANAGER', 'MC_VIEW_INVOICE', 'MC_ADD_INVOICE', 'MC_EDIT_INVOICE', 'MC_ADD_REVERSAL', 'MC_ADD_LINE_STATUS_CHANGE', 'MC_SEND_TO_PAYMENT', 'MC_DELETE_INVOICE', 'MC_SUBMIT_INVOICE', 'MC_EDIT_CONTRACT', 'MC_DELETE_CONTRACT', 'MC_REVIEW_AND_APPROVE', 'MC_VIEW_CONTRACT', 'MC_ADD_CONTRACT', 'MC_APPROVE_CONTRACT', 'MC_EDIT_REBATE_OPTIONS', 'MC_EDIT_CUSTOMER', 'MC_VIEW_PAYMENT_PACKAGE', 'MC_EDIT_PAYMENT_PACKAGE', 'MC_SUBMIT_PAYMENT_PACKAGE', 'MC_APPROVE_PAYMENT_PACKAGE', 'GP_PRICE_TYPE_ANALYSIS', 'GP_PRICE_TYPE_APPROVE', 'GP_REBATE_TRANSFER', 'GP_REVIEW_AND_APPROVE', 'GP_PRICE_TYPE_DELIVERED', 'PBR_CREATE_CONTRACT', 'PBR_EDIT_CONTRACT', 'PBR_VIEW_CONTRACT', 'PBR_DELETE_CONTRACT', 'PBR_SUBMIT_CONTRACT', 'PBR_APPROVE_CONTRACT', 'PBR_ACTIVATE_CONTRACT', 'PBR_VIEW_INVOICE', 'PBR_ADD_INVOICE', 'PBR_EDIT_INVOICE', 'PBR_DELETE_INVOICE', 'PBR_SUBMIT_INVOICE', 'PBR_VIEW_PAYMENT_PACKAGE', 'PBR_ADD_PAYMENT_PACKAGE', 'PBR_EDIT_PAYMENT_PACKAGE', 'PBR_DELETE_PAYMENT_PACKAGE', 'PBR_SUBMIT_PAYMENT_PACKAGE', 'PBR_APPROVE_PAYMENT_PACKAGE', 'PBR_SEND_TO_PAYMENT', 'PBR_APPROVE_REPORT', 'PBR_RUN_REPORT', 'PBR_CREATE_REPORT', 'PBR_EDIT_REPORT', 'PBR_ADD_EXISTING_REPORT', 'MD_EDIT_STATE', 'MD_EDIT_PROGRAM_TEMPLATE', 'MD_VIEW_IMPORT', 'MD_ADD_IMPORT', 'MD_DELETE_IMPORT', 'MD_VIEW_PERFORMANCE_DASHBOARD', 'MD_VIEW_STATE_ENTITIES', 'MD_EDIT_PRICE_TYPES', 'MD_VIEW_FILE_TEMPLATES', 'MD_VIEW_PROGRAM_TEMPLATES', 'MD_ADD_ROLE_TEMPLATE', 'MD_EDIT_ROLE_TEMPLATE', 'MD_VIEW_CLIENTS', 'MEDI_VIEW_PROGRAM_PRODUCTS', 'MEDI_VIEW_PROGRAM_ENTITIES', 'MEDI_VIEW_PROGRAM_ENTITY_TEMPLATES', 'GP_VIEW_UBR_PBR_INVOICES', 'GP_VIEW_RUNS', 'GP_VIEW_JOINS', 'GP_EDIT_JOINS', 'GP_EDIT_DATA_DICTIONARY', 'GP_VIEW_CUSTOMERS', 'GP_VIEW_PRICE_TYPE_OUTPUT', 'GP_VIEW_PRICE_TYPES', 'GP_DOWNLOAD_RUN_ATTACHMENT', 'MD_DELETE_PRODUCT', 'MD_DELETE_PRICING', 'MD_DELETE_PROGRAM_TEMPLATE', 'MD_EDIT_STATE_ENTITIES', 'MEDI_VIEW_PROGRAMS', 'MEDI_ADD_PROGRAMS', 'MEDI_EDIT_PROGRAMS', 'MEDI_DELETE_PROGRAMS', 'MEDI_VIEW_PROGRAM_VENDORS', 'MEDI_EDIT_PROGRAM_VENDORS', 'MD_EDIT_LABELERS', 'MD_DELETE_LABELERS', 'MD_VIEW_LABELERS', 'MEDI_ACCESS', 'MC_ACCESS', 'GP_ACCESS', 'PBR_ACCESS', 'MD_EDIT_FILE_TEMPLATES', 'MD_VIEW_USER_REPORTS', 'MD_VIEW_TBILL_RATES', 'MD_ADD_TBILL_RATES', 'MD_DELETE_TBILL_RATES', 'MD_VIEW_PRICE_TYPES', 'GP_EXECUTE_RUN', 'GP_EDIT_OVERRIDE', 'GP_EDIT_PRICE_TYPE', 'GP_ADD_RUN_COMMENT', 'GP_EDIT_RUN', 'GP_VIEW_DATA_DICTIONARY', 'GP_VIEW_DATA_OVERVIEW', 'MD_VIEW_UPLOADS', 'MD_VIEW_FILE_TEMPLATES_LIST', 'GP_RUN_REPORT', 'GP_VIEW_DATA', 'MEDI_VIEW_POSTMARK', 'MEDI_EDIT_POSTMARK', 'MEDI_ADD_POSTMARK', 'MEDI_DELETE_POSTMARK', 'MEDI_APPROVE_POSTMARK', 'MD_EDIT_RESOURCE', 'CBK_ACCESS', 'CBK_VIEW_PRODUCT_XREF', 'CBK_ADD_PRODUCT_XREF', 'CBK_EDIT_PRODUCT_XREF', 'CBK_VIEW_CONTRACT_XREF', 'CBK_ADD_CONTRACT_XREF', 'CBK_EDIT_CONTRACT_XREF', 'CBK_VIEW_CONTRACT', 'CBK_VIEW_COT', 'CBK_VIEW_CUSTOMER', 'CBK_ADD_CUSTOMER', 'CBK_EDIT_CUSTOMER', 'CBK_VIEW_VALIDATIONS', 'CBK_EDIT_VALIDATIONS', 'CBK_VIEW_HEADER', 'CBK_DELETE_HEADER', 'MD_VIEW_COT', 'CBK_ADD_COT', 'MD_ADD_CONTRACT', 'MD_EDIT_CONTRACT', 'MD_CREATE_CONTRACT', 'CBK_VIEW_SEARCH_EXPORT', 'MD_VIEW_CONTRACT', 'CBK_RUN_VALIDATIONS', 'CBK_EDIT_SEARCH_EXPORT', 'CBK_EDIT_HEADER', 'MC_ADD_TRACKER_CONFIGURATION', 'MC_EDIT_TRACKER_CONFIGURATION', 'MC_UPLOAD_TRACKER_CONF_FILE', 'MC_PAYMENT_TRACKER', 'MC_PAYMENT_TRACKER_ADMIN', 'MC_PAYMENT_TRACKER_META_DELETE', 'MC_PAYMENT_TRACKER_META_UPDATE', 'MC_PAYMENT_TRACKER_MANAGER', 'MEDI_CLD_VIEW_CLD', 'MD_JOB_VIEW', 'MC_VIEW_TRACKER_OPTIONS', 'MC_ADD_TRACKER_OPTIONS', 'MC_EDIT_TRACKER_OPTIONS', 'MC_DELETE_TRACKER_OPTIONS', 'MC_VIEW_TRACKER_CONFIGURATION', 'MC_DELETE_TRACKER_CONFIGURATION', 'MC_VIEW_PAYMENT_TRACKER', 'MC_ADD_PAYMENT_TRACKER', 'MC_EDIT_PAYMENT_TRACKER', 'MC_DELETE_PAYMENT_TRACKER', 'CBK_EDIT_HEADER_DETAIL', 'MD_VIEW_PRODUCT_GROUP', 'MD_ADD_EDIT_PRODUCT_GROUP', 'MD_DELETE_PRODUCT_GROUP_ITEM', 'MD_DELETE_PRODUCT_GROUP', 'CBK_DELETE_CUSTOMER', 'MEDI_CLD_EDIT_CLD', 'MEDI_CLD_VIEW_VALIDATION', 'MEDI_CLD_EDIT_VALIDATION', 'MD_SCAN_UPLOADS', 'MC_VIEW_PP_CARRY_FORWARD', 'MC_EDIT_PP_CARRY_FORWARD', 'MC_DELETE_PP_CARRY_FORWARD', 'MEDI_CLD_APPROVE_CLD', 'MEDI_CLD_ROLLBACK_CLD', 'MEDI_CLD_DELETE_CLD', 'CBK_DELETE_COT', 'CBK_ADD_RESUBMISSION', 'CBK_APPROVE_HEADER', 'MEDI_CLD_ADD_INVOICE_TRACKER', 'MEDI_CLD_VIEW_INVOICE_TRACKER', 'MEDI_CLD_EDIT_INVOICE_TRACKER', 'CBK_VIEW_AUTOVALIDATION', 'CBK_VIEW_DEFAULT_NOTES', 'CBK_ADD_DEFAULT_NOTES', 'CBK_EDIT_DEFAULT_NOTES', 'CBK_DELETE_DEFAULT_NOTES', 'MC_VIEW_CREDIT_BALANCE', 'MC_FULL_EDIT_PAYMENT_TRACKER', 'MD_EDIT_ACTIVE_PRICING', 'CBK_DELETE_CONTRACT', 'CBK_UTILITY', 'MD_VIEW_DATA_TRANSFER', 'MD_EDIT_DATA_TRANSFER', 'CBK_VIEW_845_MANAGEMENT', 'ADD_HEADER_IN_REPORT', 'MD_DELETE_DRAFT_CONTRACT', name='resourcetagenum'),
               nullable=False,
               schema='md')
    op.create_unique_constraint(None, 'resource', ['service_id', 'name'], schema='md')
    op.alter_column('role_template', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.create_unique_constraint(None, 'role_template', ['service_id', 'name'], schema='md')
    op.drop_constraint('_role_template_modified_user_id_fkey', 'role_template', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'role_template', 'user', ['modified_user_id'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key(None, 'role_template_resource', 'resource', ['resource_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key(None, 'role_template_resource', 'role_template', ['role_template_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.alter_column('service', 'assignable',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'),
               schema='md')
    op.drop_index('service_name_idx', table_name='service', schema='md')
    op.create_unique_constraint(None, 'service', ['name'], schema='md')
    op.alter_column('user', 'email',
               existing_type=sa.VARCHAR(length=64),
               nullable=True,
               schema='md')
    op.alter_column('user', 'name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True,
               schema='md')
    op.drop_index('ix_md_user_email', table_name='user', schema='md')
    op.drop_index('ix_md_user_username', table_name='user', schema='md')
    op.create_unique_constraint(None, 'user', ['email'], schema='md')
    op.create_unique_constraint(None, 'user', ['username'], schema='md')
    op.drop_constraint('user_external_client_id_fkey', 'user', schema='md', type_='foreignkey')
    op.create_foreign_key(None, 'user', 'client', ['external_client_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.drop_column('user', 'modified_by', schema='md')
    op.drop_column('user', 'read_only', schema='md')
    op.create_foreign_key(None, 'user_resource', 'resource', ['resource_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key(None, 'user_role', 'role_template', ['role_template_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.alter_column('claimleveldetail', 'cldgroup_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.alter_column('claimleveldetail', 'has_disputes',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='medi')
    op.alter_column('claimleveldetail', 'labeler',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='medi')
    op.alter_column('claimleveldetail', 'ndc11',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='medi')
    op.alter_column('claimleveldetail', 'new_record',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='medi')
    op.alter_column('claimleveldetail', 'program_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.alter_column('claimleveldetail', 'state_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.create_index(op.f('ix_medi_claimleveldetail_claim_id'), 'claimleveldetail', ['claim_id'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_claimleveldetail_has_disputes'), 'claimleveldetail', ['has_disputes'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_claimleveldetail_job_id'), 'claimleveldetail', ['job_id'], unique=False, schema='medi')
    op.drop_index('ix_cld_job_id', table_name='claimleveldetail', schema='medi')
    op.drop_index('ix_medi_claimleveldetail_cldgroup_match', table_name='claimleveldetail', schema='medi')
    op.drop_constraint('cld_job_file_id_fkey', 'cld_job', schema='medi', type_='foreignkey')
    op.drop_constraint('cld_job_client_id_fkey', 'cld_job', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'cld_job', 'file', ['file_id'], ['id'], source_schema='medi', referent_schema='md')
    op.create_unique_constraint('cldgroup_uniq', 'cldgroup', ['client_id', 'program_id', 'state_id', 'labeler', 'ndc11', 'inv_quarter', 'util_quarter'], schema='medi')
    op.drop_constraint('cldgroup_state_id_fkey', 'cldgroup', schema='medi', type_='foreignkey')
    op.drop_constraint('cldgroup_client_id_fkey', 'cldgroup', schema='medi', type_='foreignkey')
    op.drop_constraint('cldgroup_program_id_fkey', 'cldgroup', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'cldgroup', 'state', ['state_id'], ['id'], source_schema='medi', referent_schema='medi', ondelete='CASCADE')
    op.create_foreign_key(None, 'cldgroup', 'client', ['client_id'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key(None, 'cldgroup', 'program', ['program_id'], ['id'], source_schema='medi', referent_schema='medi', ondelete='CASCADE')
    op.create_foreign_key(None, 'dispute', 'transaction', ['orig_id'], ['id'], source_schema='medi', referent_schema='medi')
    op.create_index(op.f('ix_medi_dispute_code_relationship_cld_dispute_id'), 'dispute_code_relationship', ['cld_dispute_id'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_dispute_code_relationship_code_id'), 'dispute_code_relationship', ['code_id'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_dispute_code_relationship_dispute_id'), 'dispute_code_relationship', ['dispute_id'], unique=False, schema='medi')
    op.drop_index('dispute_code_relationship_cld_dispute_id_idx', table_name='dispute_code_relationship', schema='medi')
    op.drop_index('dispute_code_relationship_code_id_idx', table_name='dispute_code_relationship', schema='medi')
    op.drop_index('ix_dispute_code_relationship_dispute_id', table_name='dispute_code_relationship', schema='medi')
    op.alter_column('invoice', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.alter_column('invoice', 'reports_generating',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='medi')
    op.alter_column('invoice', 'total_interest',
               existing_type=sa.NUMERIC(precision=14, scale=2),
               nullable=False,
               schema='medi')
    op.drop_column('invoice', 'portal_rejected_by', schema='medi')
    op.drop_column('invoice', 'portal_rejected', schema='medi')
    op.create_index(op.f('ix_medi_invoice_file_invoice_id'), 'invoice_file', ['invoice_id'], unique=False, schema='medi')
    op.drop_index('ix_invoice_file_invoice_id', table_name='invoice_file', schema='medi')
    op.alter_column('payment_tracker', 'auto_analyst',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='medi')
    op.alter_column('payment_tracker', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.create_index(op.f('ix_medi_payment_tracker_program'), 'payment_tracker', ['program'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_payment_tracker_program_id'), 'payment_tracker', ['program_id'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_payment_tracker_state'), 'payment_tracker', ['state'], unique=False, schema='medi')
    op.create_index(op.f('ix_medi_payment_tracker_state_id'), 'payment_tracker', ['state_id'], unique=False, schema='medi')
    op.drop_index('ix_medi_payment_tracker_invoice_id', table_name='payment_tracker', schema='medi')
    op.drop_index('ix_payment_tracker_program', table_name='payment_tracker', schema='medi')
    op.drop_index('ix_payment_tracker_program_id', table_name='payment_tracker', schema='medi')
    op.drop_index('ix_payment_tracker_state', table_name='payment_tracker', schema='medi')
    op.drop_index('ix_payment_tracker_state_id', table_name='payment_tracker', schema='medi')
    op.drop_constraint('payment_tracker_modified_user_id_fkey', 'payment_tracker', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'payment_tracker', 'user', ['modified_user_id'], ['id'], source_schema='medi', referent_schema='md')
    op.alter_column('postmark_file', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.alter_column('postmark_file', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='medi')
    op.alter_column('postmark_file', 'program_template_id',
               existing_type=sa.INTEGER(),
               comment='Program Template Reference',
               existing_nullable=False,
               schema='medi')
    op.alter_column('postmark_file', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('medi.postmark_file_id_seq'::regclass)"),
               schema='medi')
    op.alter_column('postmark_file', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='medi')
    op.drop_index('postmark_idx_sb_id_version', table_name='postmark_file', schema='medi')
    op.drop_constraint('postmark_file_approved_by_fkey', 'postmark_file', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'postmark_file', 'user', ['approved_by'], ['id'], source_schema='medi', referent_schema='md')
    op.alter_column('program', 'designation',
               existing_type=sa.VARCHAR(),
               comment='Program Designation (Mandatory/Voluntary)',
               existing_nullable=False,
               existing_server_default=sa.text("'VOLUNTARY'::character varying"),
               schema='medi')
    op.alter_column('program_template', 'designation',
               existing_type=sa.VARCHAR(),
               comment='Program Designation (Mandatory/Voluntary)',
               existing_nullable=False,
               existing_server_default=sa.text("'VOLUNTARY'::character varying"),
               schema='medi')
    op.alter_column('program_template', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.alter_column('program_template', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='medi')
    op.alter_column('program_template', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('medi.program_template_id_seq'::regclass)"),
               schema='medi')
    op.alter_column('program_template', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='medi')
    op.drop_index('program_template_idx_sb_id_version', table_name='program_template', schema='medi')
    op.create_unique_constraint(None, 'program_template', ['sb_id', 'version'], schema='medi')
    op.drop_constraint('program_template_approved_by_fkey', 'program_template', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'program_template', 'user', ['approved_by'], ['id'], source_schema='medi', referent_schema='md')
    op.alter_column('program_vendor', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('medi.program_vendor_id_seq'::regclass)"),
               schema='medi')
    op.drop_index('program_vendor_labeler_program_state_idx', table_name='program_vendor', schema='medi')
    op.create_unique_constraint(None, 'program_vendor', ['vendor_id', 'labeler', 'program_id', 'state_id'], schema='medi')
    op.create_index(op.f('ix_medi_rebate_change_candidate_client_id'), 'rebate_change_candidate', ['client_id'], unique=False, schema='medi')
    op.alter_column('state_entity', 'check_state',
               existing_type=sa.VARCHAR(),
               comment='State',
               existing_nullable=False,
               schema='medi')
    op.alter_column('threshold', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("'-1'::integer"),
               schema='medi')
    op.drop_constraint('threshold_product_id_fkey', 'threshold', schema='medi', type_='foreignkey')
    op.drop_constraint('threshold_modified_user_id_fkey', 'threshold', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'threshold', 'user', ['modified_user_id'], ['id'], source_schema='medi', referent_schema='md')
    op.create_unique_constraint(None, 'transaction', ['submission_id', 'ndc11'], schema='medi')
    op.alter_column('variance_test', 'ffs_only',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='medi')
    op.alter_column('variance_test', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("'-1'::integer"),
               schema='medi')
    op.drop_constraint('variance_test_modified_user_id_fkey', 'variance_test', schema='medi', type_='foreignkey')
    op.create_foreign_key(None, 'variance_test', 'user', ['modified_user_id'], ['id'], source_schema='medi', referent_schema='md')
    op.create_index(op.f('ix_medi_variance_test_result_transaction_id'), 'variance_test_result', ['transaction_id'], unique=False, schema='medi')
    op.drop_index('ix_variance_test_result_transaction_id', table_name='variance_test_result', schema='medi')
    op.alter_column('bucket', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.alter_column('bucket', 'rebate_term_ids',
               existing_type=sa.VARCHAR(length=255),
               nullable=False,
               schema='pbr')
    op.alter_column('calculation', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.drop_constraint('calculation_client_id_fkey', 'calculation', schema='pbr', type_='foreignkey')
    op.create_foreign_key(None, 'calculation', 'client', ['client_id'], ['id'], source_schema='pbr', referent_schema='md')
    op.alter_column('calculation_rate', 'contract_rate_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.create_foreign_key(None, 'calculation_rate', 'calculation', ['calculation_id'], ['id'], source_schema='pbr', referent_schema='pbr', ondelete='CASCADE')
    op.alter_column('calculation_result', 'to_pay_rate',
               existing_type=sa.NUMERIC(precision=16, scale=3),
               nullable=False,
               schema='pbr')
    op.alter_column('contract', 'contract_type',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='pbr')
    op.alter_column('contract', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.alter_column('contract', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'),
               schema='pbr')
    op.alter_column('contract', 'requires_groups',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='pbr')
    op.alter_column('contract', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text("currval('pbr.contract_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.drop_index('contract_idx_sb_id_version', table_name='contract', schema='pbr')
    op.create_unique_constraint(None, 'contract', ['sb_id', 'version'], schema='pbr')
    op.drop_constraint('contract_approved_by_fkey', 'contract', schema='pbr', type_='foreignkey')
    op.create_foreign_key(None, 'contract', 'user', ['approved_by'], ['id'], source_schema='pbr', referent_schema='md')
    op.alter_column('contract_condition', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_condition_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_condition', 'orig_rate_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_condition', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract_product', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_product', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_product_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_product', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract_product_group', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('contract_product_group', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_product_group', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_product_group_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_product_group', 'product_group_name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True,
               schema='pbr')
    op.alter_column('contract_product_group', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('contract_product_group', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.create_foreign_key(None, 'contract_product_group', 'product', ['product_id'], ['id'], source_schema='pbr', referent_schema='md')
    op.alter_column('contract_rate', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_rate', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_rate_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_rate', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=True,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('invoice', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.alter_column('invoice', 'period',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('invoice', 'rebate_term_ids',
               existing_type=sa.VARCHAR(length=255),
               nullable=False,
               schema='pbr')
    op.alter_column('invoice', 'status',
               existing_type=postgresql.ENUM('CLEAN', 'DATA_CHANGED', 'DATA_INVALID', 'DATA_REFRESH', name='invoicedatastatusenum'),
               nullable=False,
               schema='pbr')
    op.create_foreign_key(None, 'invoice', 'settlement', ['settlement_id'], ['id'], source_schema='pbr', referent_schema='pbr')
    op.alter_column('invoice_file', 'filetype',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.create_unique_constraint(op.f('invoicetransactionexclusion_client_id_invoice_id_transaction_id_key'), 'invoice_transaction_exclusion', ['client_id', 'invoice_id', 'transaction_id'], schema='pbr')
    op.drop_index('ix_invoicetransactionexclusion_client_id_invoice_id_tra_c369', table_name='invoice_transaction_exclusion', schema='pbr')
    op.alter_column('pbr_transaction', 'st_addr',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_city',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_cot',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_state',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_zip',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='pbr')
    op.create_index('client_id', 'pbr_transaction', ['source', 'year', 'month', 'revision'], unique=False, schema='pbr')
    op.drop_index('ix_pbr_pbr_transaction_trx_revision', table_name='pbr_transaction', schema='pbr')
    op.create_foreign_key(None, 'pbr_transaction', 'transaction_group', ['group_id'], ['id'], source_schema='pbr', referent_schema='pbr')
    op.alter_column('settlement', 'payment_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='pbr')
    op.alter_column('transaction_group', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    # ### end Alembic commands ###


def downgrade_db():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('transaction_group', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('settlement', 'payment_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='pbr')
    op.drop_constraint(None, 'pbr_transaction', schema='pbr', type_='foreignkey')
    op.create_index('ix_pbr_pbr_transaction_trx_revision', 'pbr_transaction', ['client_id', 'source', 'year', 'month', 'revision'], unique=False, schema='pbr')
    op.drop_index('client_id', table_name='pbr_transaction', schema='pbr')
    op.alter_column('pbr_transaction', 'st_zip',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_state',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_cot',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_city',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='pbr')
    op.alter_column('pbr_transaction', 'st_addr',
               existing_type=sa.VARCHAR(),
               nullable=False,
               schema='pbr')
    op.create_index('ix_invoicetransactionexclusion_client_id_invoice_id_tra_c369', 'invoice_transaction_exclusion', ['client_id', 'invoice_id', 'transaction_id'], unique=True, schema='pbr')
    op.drop_constraint(op.f('invoicetransactionexclusion_client_id_invoice_id_transaction_id_key'), 'invoice_transaction_exclusion', schema='pbr', type_='unique')
    op.alter_column('invoice_file', 'filetype',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.drop_constraint(None, 'invoice', schema='pbr', type_='foreignkey')
    op.alter_column('invoice', 'status',
               existing_type=postgresql.ENUM('CLEAN', 'DATA_CHANGED', 'DATA_INVALID', 'DATA_REFRESH', name='invoicedatastatusenum'),
               nullable=True,
               schema='pbr')
    op.alter_column('invoice', 'rebate_term_ids',
               existing_type=sa.VARCHAR(length=255),
               nullable=True,
               schema='pbr')
    op.alter_column('invoice', 'period',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.alter_column('invoice', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('contract_rate', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract_rate', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_rate_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_rate', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.drop_constraint(None, 'contract_product_group', schema='pbr', type_='foreignkey')
    op.alter_column('contract_product_group', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract_product_group', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.alter_column('contract_product_group', 'product_group_name',
               existing_type=sa.VARCHAR(length=64),
               nullable=False,
               schema='pbr')
    op.alter_column('contract_product_group', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_product_group_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_product_group', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_product_group', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='pbr')
    op.alter_column('contract_product', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract_product', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_product_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract_product', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_condition', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract_condition', 'orig_rate_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='pbr')
    op.alter_column('contract_condition', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('pbr.contract_condition_id_seq'::regclass)"),
               schema='pbr')
    op.drop_constraint(None, 'contract', schema='pbr', type_='foreignkey')
    op.create_foreign_key('contract_approved_by_fkey', 'contract', 'user', ['approved_by'], ['id'], source_schema='pbr', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'contract', schema='pbr', type_='unique')
    op.create_index('contract_idx_sb_id_version', 'contract', ['sb_id', 'version'], unique=True, schema='pbr')
    op.alter_column('contract', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='pbr')
    op.alter_column('contract', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('pbr.contract_id_seq'::regclass)"),
               schema='pbr')
    op.alter_column('contract', 'requires_groups',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='pbr')
    op.alter_column('contract', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='pbr')
    op.alter_column('contract', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('contract', 'contract_type',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='pbr')
    op.alter_column('calculation_result', 'to_pay_rate',
               existing_type=sa.NUMERIC(precision=16, scale=3),
               nullable=True,
               schema='pbr')
    op.drop_constraint(None, 'calculation_rate', schema='pbr', type_='foreignkey')
    op.alter_column('calculation_rate', 'contract_rate_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.drop_constraint(None, 'calculation', schema='pbr', type_='foreignkey')
    op.create_foreign_key('calculation_client_id_fkey', 'calculation', 'client', ['client_id'], ['id'], source_schema='pbr', referent_schema='md', ondelete='CASCADE')
    op.alter_column('calculation', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.alter_column('bucket', 'rebate_term_ids',
               existing_type=sa.VARCHAR(length=255),
               nullable=True,
               schema='pbr')
    op.alter_column('bucket', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='pbr')
    op.create_index('ix_variance_test_result_transaction_id', 'variance_test_result', ['transaction_id'], unique=False, schema='medi')
    op.drop_index(op.f('ix_medi_variance_test_result_transaction_id'), table_name='variance_test_result', schema='medi')
    op.drop_constraint(None, 'variance_test', schema='medi', type_='foreignkey')
    op.create_foreign_key('variance_test_modified_user_id_fkey', 'variance_test', 'user', ['modified_user_id'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.alter_column('variance_test', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("'-1'::integer"),
               schema='medi')
    op.alter_column('variance_test', 'ffs_only',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='medi')
    op.drop_constraint(None, 'transaction', schema='medi', type_='unique')
    op.drop_constraint(None, 'threshold', schema='medi', type_='foreignkey')
    op.create_foreign_key('threshold_modified_user_id_fkey', 'threshold', 'user', ['modified_user_id'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('threshold_product_id_fkey', 'threshold', 'product', ['product_id'], ['id'], source_schema='medi', referent_schema='md')
    op.alter_column('threshold', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("'-1'::integer"),
               schema='medi')
    op.alter_column('state_entity', 'check_state',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='State',
               existing_nullable=False,
               schema='medi')
    op.drop_index(op.f('ix_medi_rebate_change_candidate_client_id'), table_name='rebate_change_candidate', schema='medi')
    op.drop_constraint(None, 'program_vendor', schema='medi', type_='unique')
    op.create_index('program_vendor_labeler_program_state_idx', 'program_vendor', ['vendor_id', 'labeler', 'program_id', 'state_id'], unique=True, schema='medi')
    op.alter_column('program_vendor', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('medi.program_vendor_id_seq'::regclass)"),
               schema='medi')
    op.drop_constraint(None, 'program_template', schema='medi', type_='foreignkey')
    op.create_foreign_key('program_template_approved_by_fkey', 'program_template', 'user', ['approved_by'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'program_template', schema='medi', type_='unique')
    op.create_index('program_template_idx_sb_id_version', 'program_template', ['sb_id', 'version'], unique=True, schema='medi')
    op.alter_column('program_template', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='medi')
    op.alter_column('program_template', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('medi.program_template_id_seq'::regclass)"),
               schema='medi')
    op.alter_column('program_template', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='medi')
    op.alter_column('program_template', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.alter_column('program_template', 'designation',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Program Designation (Mandatory/Voluntary)',
               existing_nullable=False,
               existing_server_default=sa.text("'VOLUNTARY'::character varying"),
               schema='medi')
    op.alter_column('program', 'designation',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Program Designation (Mandatory/Voluntary)',
               existing_nullable=False,
               existing_server_default=sa.text("'VOLUNTARY'::character varying"),
               schema='medi')
    op.drop_constraint(None, 'postmark_file', schema='medi', type_='foreignkey')
    op.create_foreign_key('postmark_file_approved_by_fkey', 'postmark_file', 'user', ['approved_by'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.create_index('postmark_idx_sb_id_version', 'postmark_file', ['sb_id', 'version'], unique=True, schema='medi')
    op.alter_column('postmark_file', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='medi')
    op.alter_column('postmark_file', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('medi.postmark_file_id_seq'::regclass)"),
               schema='medi')
    op.alter_column('postmark_file', 'program_template_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Program Template Reference',
               existing_nullable=False,
               schema='medi')
    op.alter_column('postmark_file', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='medi')
    op.alter_column('postmark_file', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.drop_constraint(None, 'payment_tracker', schema='medi', type_='foreignkey')
    op.create_foreign_key('payment_tracker_modified_user_id_fkey', 'payment_tracker', 'user', ['modified_user_id'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.create_index('ix_payment_tracker_state_id', 'payment_tracker', ['state_id'], unique=False, schema='medi')
    op.create_index('ix_payment_tracker_state', 'payment_tracker', ['state'], unique=False, schema='medi')
    op.create_index('ix_payment_tracker_program_id', 'payment_tracker', ['program_id'], unique=False, schema='medi')
    op.create_index('ix_payment_tracker_program', 'payment_tracker', ['program'], unique=False, schema='medi')
    op.create_index('ix_medi_payment_tracker_invoice_id', 'payment_tracker', ['invoice_id'], unique=False, schema='medi')
    op.drop_index(op.f('ix_medi_payment_tracker_state_id'), table_name='payment_tracker', schema='medi')
    op.drop_index(op.f('ix_medi_payment_tracker_state'), table_name='payment_tracker', schema='medi')
    op.drop_index(op.f('ix_medi_payment_tracker_program_id'), table_name='payment_tracker', schema='medi')
    op.drop_index(op.f('ix_medi_payment_tracker_program'), table_name='payment_tracker', schema='medi')
    op.alter_column('payment_tracker', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.alter_column('payment_tracker', 'auto_analyst',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='medi')
    op.create_index('ix_invoice_file_invoice_id', 'invoice_file', ['invoice_id'], unique=False, schema='medi')
    op.drop_index(op.f('ix_medi_invoice_file_invoice_id'), table_name='invoice_file', schema='medi')
    op.add_column('invoice', sa.Column('portal_rejected', sa.BOOLEAN(), autoincrement=False, nullable=True), schema='medi')
    op.add_column('invoice', sa.Column('portal_rejected_by', sa.VARCHAR(), autoincrement=False, nullable=True), schema='medi')
    op.alter_column('invoice', 'total_interest',
               existing_type=sa.NUMERIC(precision=14, scale=2),
               nullable=True,
               schema='medi')
    op.alter_column('invoice', 'reports_generating',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='medi')
    op.alter_column('invoice', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.create_index('ix_dispute_code_relationship_dispute_id', 'dispute_code_relationship', ['dispute_id'], unique=False, schema='medi')
    op.create_index('dispute_code_relationship_code_id_idx', 'dispute_code_relationship', ['code_id'], unique=False, schema='medi')
    op.create_index('dispute_code_relationship_cld_dispute_id_idx', 'dispute_code_relationship', ['cld_dispute_id'], unique=False, schema='medi')
    op.drop_index(op.f('ix_medi_dispute_code_relationship_dispute_id'), table_name='dispute_code_relationship', schema='medi')
    op.drop_index(op.f('ix_medi_dispute_code_relationship_code_id'), table_name='dispute_code_relationship', schema='medi')
    op.drop_index(op.f('ix_medi_dispute_code_relationship_cld_dispute_id'), table_name='dispute_code_relationship', schema='medi')
    op.drop_constraint(None, 'dispute', schema='medi', type_='foreignkey')
    op.drop_constraint(None, 'cldgroup', schema='medi', type_='foreignkey')
    op.drop_constraint(None, 'cldgroup', schema='medi', type_='foreignkey')
    op.drop_constraint(None, 'cldgroup', schema='medi', type_='foreignkey')
    op.create_foreign_key('cldgroup_program_id_fkey', 'cldgroup', 'program', ['program_id'], ['id'], source_schema='medi', referent_schema='medi')
    op.create_foreign_key('cldgroup_client_id_fkey', 'cldgroup', 'client', ['client_id'], ['id'], source_schema='medi', referent_schema='md')
    op.create_foreign_key('cldgroup_state_id_fkey', 'cldgroup', 'state', ['state_id'], ['id'], source_schema='medi', referent_schema='medi')
    op.drop_constraint('cldgroup_uniq', 'cldgroup', schema='medi', type_='unique')
    op.drop_constraint(None, 'cld_job', schema='medi', type_='foreignkey')
    op.create_foreign_key('cld_job_client_id_fkey', 'cld_job', 'client', ['client_id'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('cld_job_file_id_fkey', 'cld_job', 'file', ['file_id'], ['id'], source_schema='medi', referent_schema='md', ondelete='CASCADE')
    op.create_index('ix_medi_claimleveldetail_cldgroup_match', 'claimleveldetail', ['client_id', 'program_id', 'state_id', 'labeler', 'ndc11', 'orig_quarter', 'util_quarter'], unique=False, schema='medi')
    op.create_index('ix_cld_job_id', 'claimleveldetail', ['job_id'], unique=False, schema='medi')
    op.drop_index(op.f('ix_medi_claimleveldetail_job_id'), table_name='claimleveldetail', schema='medi')
    op.drop_index(op.f('ix_medi_claimleveldetail_has_disputes'), table_name='claimleveldetail', schema='medi')
    op.drop_index(op.f('ix_medi_claimleveldetail_claim_id'), table_name='claimleveldetail', schema='medi')
    op.alter_column('claimleveldetail', 'state_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'program_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'new_record',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'ndc11',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'labeler',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'has_disputes',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='medi')
    op.alter_column('claimleveldetail', 'cldgroup_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='medi')
    op.drop_constraint(None, 'user_role', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'user_resource', schema='md', type_='foreignkey')
    op.add_column('user', sa.Column('read_only', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True), schema='md')
    op.add_column('user', sa.Column('modified_by', sa.VARCHAR(length=64), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False), schema='md')
    op.drop_constraint(None, 'user', schema='md', type_='foreignkey')
    op.create_foreign_key('user_external_client_id_fkey', 'user', 'client', ['external_client_id'], ['id'], source_schema='md', referent_schema='md')
    op.drop_constraint(None, 'user', schema='md', type_='unique')
    op.drop_constraint(None, 'user', schema='md', type_='unique')
    op.create_index('ix_md_user_username', 'user', ['username'], unique=True, schema='md')
    op.create_index('ix_md_user_email', 'user', ['email'], unique=True, schema='md')
    op.alter_column('user', 'name',
               existing_type=sa.VARCHAR(length=64),
               nullable=False,
               schema='md')
    op.alter_column('user', 'email',
               existing_type=sa.VARCHAR(length=64),
               nullable=False,
               schema='md')
    op.drop_constraint(None, 'service', schema='md', type_='unique')
    op.create_index('service_name_idx', 'service', ['name'], unique=True, schema='md')
    op.alter_column('service', 'assignable',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'),
               schema='md')
    op.drop_constraint(None, 'role_template_resource', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'role_template_resource', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'role_template', schema='md', type_='foreignkey')
    op.create_foreign_key('_role_template_modified_user_id_fkey', 'role_template', 'user', ['modified_user_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'role_template', schema='md', type_='unique')
    op.alter_column('role_template', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.drop_constraint(None, 'resource', schema='md', type_='unique')
    op.alter_column('resource', 'resource_tag_id',
               existing_type=postgresql.ENUM('MD_VIEW_USER', 'MD_EDIT_USER', 'MD_ADD_USER', 'MD_ADD_CLIENT', 'MD_DELETE_CLIENT', 'MD_EXECUTE_SUPPORT_ACTION', 'MD_ADD_CUSTOMER', 'MD_VIEW_PRICING', 'MD_ADD_PRICING', 'MD_ADD_PRODUCT', 'MD_EDIT_PRICING', 'MD_REVIEW_AND_APPROVE', 'MD_EDIT_CLIENTS', 'MD_EDIT_PRODUCT', 'MD_VIEW_PRODUCT', 'MD_VIEW_CUSTOMER', 'MD_EDIT_CUSTOMER', 'MD_DELETE_CUSTOMER', 'MEDI_SEND_TO_PAYMENT', 'MEDI_APPROVE_REPORT', 'MEDI_PAYMENT_TRACKER', 'MEDI_PAYMENT_TRACKER_ADMIN', 'MEDI_PAYMENT_TRACKER_MANAGER', 'MC_VIEW_INVOICE', 'MC_ADD_INVOICE', 'MC_EDIT_INVOICE', 'MC_ADD_REVERSAL', 'MC_ADD_LINE_STATUS_CHANGE', 'MC_SEND_TO_PAYMENT', 'MC_DELETE_INVOICE', 'MC_SUBMIT_INVOICE', 'MC_EDIT_CONTRACT', 'MC_DELETE_CONTRACT', 'MC_REVIEW_AND_APPROVE', 'MC_VIEW_CONTRACT', 'MC_ADD_CONTRACT', 'MC_APPROVE_CONTRACT', 'MC_EDIT_REBATE_OPTIONS', 'MC_EDIT_CUSTOMER', 'MC_VIEW_PAYMENT_PACKAGE', 'MC_EDIT_PAYMENT_PACKAGE', 'MC_SUBMIT_PAYMENT_PACKAGE', 'MC_APPROVE_PAYMENT_PACKAGE', 'GP_PRICE_TYPE_ANALYSIS', 'GP_PRICE_TYPE_APPROVE', 'GP_REBATE_TRANSFER', 'GP_REVIEW_AND_APPROVE', 'GP_PRICE_TYPE_DELIVERED', 'PBR_CREATE_CONTRACT', 'PBR_EDIT_CONTRACT', 'PBR_VIEW_CONTRACT', 'PBR_DELETE_CONTRACT', 'PBR_SUBMIT_CONTRACT', 'PBR_APPROVE_CONTRACT', 'PBR_ACTIVATE_CONTRACT', 'PBR_VIEW_INVOICE', 'PBR_ADD_INVOICE', 'PBR_EDIT_INVOICE', 'PBR_DELETE_INVOICE', 'PBR_SUBMIT_INVOICE', 'PBR_VIEW_PAYMENT_PACKAGE', 'PBR_ADD_PAYMENT_PACKAGE', 'PBR_EDIT_PAYMENT_PACKAGE', 'PBR_DELETE_PAYMENT_PACKAGE', 'PBR_SUBMIT_PAYMENT_PACKAGE', 'PBR_APPROVE_PAYMENT_PACKAGE', 'PBR_SEND_TO_PAYMENT', 'PBR_APPROVE_REPORT', 'PBR_RUN_REPORT', 'PBR_CREATE_REPORT', 'PBR_EDIT_REPORT', 'PBR_ADD_EXISTING_REPORT', 'MD_EDIT_STATE', 'MD_EDIT_PROGRAM_TEMPLATE', 'MD_VIEW_IMPORT', 'MD_ADD_IMPORT', 'MD_DELETE_IMPORT', 'MD_VIEW_PERFORMANCE_DASHBOARD', 'MD_VIEW_STATE_ENTITIES', 'MD_EDIT_PRICE_TYPES', 'MD_VIEW_FILE_TEMPLATES', 'MD_VIEW_PROGRAM_TEMPLATES', 'MD_ADD_ROLE_TEMPLATE', 'MD_EDIT_ROLE_TEMPLATE', 'MD_VIEW_CLIENTS', 'MEDI_VIEW_PROGRAM_PRODUCTS', 'MEDI_VIEW_PROGRAM_ENTITIES', 'MEDI_VIEW_PROGRAM_ENTITY_TEMPLATES', 'GP_VIEW_UBR_PBR_INVOICES', 'GP_VIEW_RUNS', 'GP_VIEW_JOINS', 'GP_EDIT_JOINS', 'GP_EDIT_DATA_DICTIONARY', 'GP_VIEW_CUSTOMERS', 'GP_VIEW_PRICE_TYPE_OUTPUT', 'GP_VIEW_PRICE_TYPES', 'GP_DOWNLOAD_RUN_ATTACHMENT', 'MD_DELETE_PRODUCT', 'MD_DELETE_PRICING', 'MD_DELETE_PROGRAM_TEMPLATE', 'MD_EDIT_STATE_ENTITIES', 'MEDI_VIEW_PROGRAMS', 'MEDI_ADD_PROGRAMS', 'MEDI_EDIT_PROGRAMS', 'MEDI_DELETE_PROGRAMS', 'MEDI_VIEW_PROGRAM_VENDORS', 'MEDI_EDIT_PROGRAM_VENDORS', 'MD_EDIT_LABELERS', 'MD_DELETE_LABELERS', 'MD_VIEW_LABELERS', 'MEDI_ACCESS', 'MC_ACCESS', 'GP_ACCESS', 'PBR_ACCESS', 'MD_EDIT_FILE_TEMPLATES', 'MD_VIEW_USER_REPORTS', 'MD_VIEW_TBILL_RATES', 'MD_ADD_TBILL_RATES', 'MD_DELETE_TBILL_RATES', 'MD_VIEW_PRICE_TYPES', 'GP_EXECUTE_RUN', 'GP_EDIT_OVERRIDE', 'GP_EDIT_PRICE_TYPE', 'GP_ADD_RUN_COMMENT', 'GP_EDIT_RUN', 'GP_VIEW_DATA_DICTIONARY', 'GP_VIEW_DATA_OVERVIEW', 'MD_VIEW_UPLOADS', 'MD_VIEW_FILE_TEMPLATES_LIST', 'GP_RUN_REPORT', 'GP_VIEW_DATA', 'MEDI_VIEW_POSTMARK', 'MEDI_EDIT_POSTMARK', 'MEDI_ADD_POSTMARK', 'MEDI_DELETE_POSTMARK', 'MEDI_APPROVE_POSTMARK', 'MD_EDIT_RESOURCE', 'CBK_ACCESS', 'CBK_VIEW_PRODUCT_XREF', 'CBK_ADD_PRODUCT_XREF', 'CBK_EDIT_PRODUCT_XREF', 'CBK_VIEW_CONTRACT_XREF', 'CBK_ADD_CONTRACT_XREF', 'CBK_EDIT_CONTRACT_XREF', 'CBK_VIEW_CONTRACT', 'CBK_VIEW_COT', 'CBK_VIEW_CUSTOMER', 'CBK_ADD_CUSTOMER', 'CBK_EDIT_CUSTOMER', 'CBK_VIEW_VALIDATIONS', 'CBK_EDIT_VALIDATIONS', 'CBK_VIEW_HEADER', 'CBK_DELETE_HEADER', 'MD_VIEW_COT', 'CBK_ADD_COT', 'MD_ADD_CONTRACT', 'MD_EDIT_CONTRACT', 'MD_CREATE_CONTRACT', 'CBK_VIEW_SEARCH_EXPORT', 'MD_VIEW_CONTRACT', 'CBK_RUN_VALIDATIONS', 'CBK_EDIT_SEARCH_EXPORT', 'CBK_EDIT_HEADER', 'MC_ADD_TRACKER_CONFIGURATION', 'MC_EDIT_TRACKER_CONFIGURATION', 'MC_UPLOAD_TRACKER_CONF_FILE', 'MC_PAYMENT_TRACKER', 'MC_PAYMENT_TRACKER_ADMIN', 'MC_PAYMENT_TRACKER_META_DELETE', 'MC_PAYMENT_TRACKER_META_UPDATE', 'MC_PAYMENT_TRACKER_MANAGER', 'MEDI_CLD_VIEW_CLD', 'MD_JOB_VIEW', 'MC_VIEW_TRACKER_OPTIONS', 'MC_ADD_TRACKER_OPTIONS', 'MC_EDIT_TRACKER_OPTIONS', 'MC_DELETE_TRACKER_OPTIONS', 'MC_VIEW_TRACKER_CONFIGURATION', 'MC_DELETE_TRACKER_CONFIGURATION', 'MC_VIEW_PAYMENT_TRACKER', 'MC_ADD_PAYMENT_TRACKER', 'MC_EDIT_PAYMENT_TRACKER', 'MC_DELETE_PAYMENT_TRACKER', 'CBK_EDIT_HEADER_DETAIL', 'MD_VIEW_PRODUCT_GROUP', 'MD_ADD_EDIT_PRODUCT_GROUP', 'MD_DELETE_PRODUCT_GROUP_ITEM', 'MD_DELETE_PRODUCT_GROUP', 'CBK_DELETE_CUSTOMER', 'MEDI_CLD_EDIT_CLD', 'MEDI_CLD_VIEW_VALIDATION', 'MEDI_CLD_EDIT_VALIDATION', 'MD_SCAN_UPLOADS', 'MC_VIEW_PP_CARRY_FORWARD', 'MC_EDIT_PP_CARRY_FORWARD', 'MC_DELETE_PP_CARRY_FORWARD', 'MEDI_CLD_APPROVE_CLD', 'MEDI_CLD_ROLLBACK_CLD', 'MEDI_CLD_DELETE_CLD', 'CBK_DELETE_COT', 'CBK_ADD_RESUBMISSION', 'CBK_APPROVE_HEADER', 'MEDI_CLD_ADD_INVOICE_TRACKER', 'MEDI_CLD_VIEW_INVOICE_TRACKER', 'MEDI_CLD_EDIT_INVOICE_TRACKER', 'CBK_VIEW_AUTOVALIDATION', 'CBK_VIEW_DEFAULT_NOTES', 'CBK_ADD_DEFAULT_NOTES', 'CBK_EDIT_DEFAULT_NOTES', 'CBK_DELETE_DEFAULT_NOTES', 'MC_VIEW_CREDIT_BALANCE', 'MC_FULL_EDIT_PAYMENT_TRACKER', 'MD_EDIT_ACTIVE_PRICING', 'CBK_DELETE_CONTRACT', 'CBK_UTILITY', 'MD_VIEW_DATA_TRANSFER', 'MD_EDIT_DATA_TRANSFER', 'CBK_VIEW_845_MANAGEMENT', 'ADD_HEADER_IN_REPORT', 'MD_DELETE_DRAFT_CONTRACT', name='resourcetagenum'),
               nullable=True,
               schema='md')
    op.alter_column('resource', 'pretty_name',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='md')
    op.alter_column('resource', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='md')
    op.drop_constraint(None, 'product_labeler', schema='md', type_='foreignkey')
    op.create_foreign_key('product_labeler_client_id_fkey', 'product_labeler', 'client', ['client_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('product_group_item_product_id_fkey', 'product_group_item', 'product', ['product_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('product_group', 'start_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='md')
    op.alter_column('product_group', 'end_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='md')
    op.add_column('product', sa.Column('calc_type', postgresql.ENUM('ALWAYS_5I', 'USE_RATIO', 'RCP', name='ratiotypeenum'), server_default=sa.text("'USE_RATIO'::ratiotypeenum"), autoincrement=False, nullable=False), schema='md')
    op.drop_constraint(None, 'product', schema='md', type_='foreignkey')
    op.create_foreign_key('product_approved_by_fkey', 'product', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'product', schema='md', type_='unique')
    op.create_index('product_idx_sb_id_version', 'product', ['sb_id', 'version'], unique=True, schema='md')
    op.create_index('product_client_id_ndc11_key', 'product', ['client_id', 'ndc11'], unique=True, schema='md')
    op.drop_index('product_ndc11_uniq', table_name='product', schema='md')
    op.alter_column('product', 'unit_conversion_factor',
               existing_type=sa.NUMERIC(precision=13, scale=3),
               comment='Unit Conversion Factor - SALE_UOM to UNIT_UOM',
               existing_nullable=False,
               schema='md')
    op.alter_column('product', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.alter_column('product', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('md.product_id_seq'::regclass)"),
               schema='md')
    op.alter_column('product', 'reportable_nfamp',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='GP NFAMP Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_iff',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='IFF Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_bp',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='Best Price Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_asp',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='GP ASP Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'reportable_amp',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='AMP Reportability',
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.alter_column('product', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('product', 'min_days_supply',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Minimum days supply',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'min_daycon_ubr',
               existing_type=sa.NUMERIC(precision=14, scale=3),
               comment=None,
               existing_comment='Minimum daily consumption',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'medicaid_uom',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Medicaid Unit of Measure',
               existing_nullable=False,
               existing_server_default=sa.text("'TAB'::character varying"),
               schema='md')
    op.alter_column('product', 'max_days_supply',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Maximum days supply',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'max_daycon_ubr',
               existing_type=sa.NUMERIC(precision=14, scale=3),
               comment=None,
               existing_comment='Maximum daily consumption',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'jcode',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='JCode',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'internal',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'),
               schema='md')
    op.alter_column('product', 'flag_bp',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Best Price Eligibility',
               existing_nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'flag_amp',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='AMP Eligibility',
               existing_nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'fda_application_number',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='FDA Application Number',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'elig_start_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Medicaid Eligibility Start Date',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'elig_end_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Medicaid Eligibility End Date',
               existing_nullable=True,
               schema='md')
    op.alter_column('product', 'auto_add_product',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Flag to indicate if this product auto inserts into mandatory programs',
               existing_nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('product', 'amp_type',
               existing_type=sa.VARCHAR(length=10),
               nullable=True,
               comment='5i/5i_always/RCP Indicator',
               existing_server_default=sa.text("'5I'::character varying"),
               schema='md')
    op.drop_constraint(None, 'pricing_difference_detail', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'pricing_difference_detail', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'pricing_difference_detail', schema='md', type_='foreignkey')
    op.create_foreign_key('pricing_difference_detail_fk_2', 'pricing_difference_detail', 'pricing', ['pricing_id'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key('pricing_difference_detail_fk_1', 'pricing_difference_detail', 'product', ['product_id'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key('pricing_difference_detail_fk', 'pricing_difference_detail', 'pricing_difference', ['pricing_difference_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('pricing_difference_detail', 'row_number',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('pricing_difference_detail', 'pricing_difference_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.drop_constraint(None, 'pricing_difference', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'pricing_difference', schema='md', type_='foreignkey')
    op.create_foreign_key('pricing_difference_fk_1', 'pricing_difference', 'user', ['executed_by'], ['id'], source_schema='md', referent_schema='md')
    op.create_foreign_key('pricing_difference_fk', 'pricing_difference', 'file', ['file_id'], ['id'], source_schema='md', referent_schema='md')
    op.alter_column('pricing_difference', 'file_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('pricing_difference', 'execution_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='md')
    op.alter_column('pricing_difference', 'executed_by',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.drop_constraint(None, 'pricing', schema='md', type_='foreignkey')
    op.create_foreign_key('pricing_approved_by_fkey', 'pricing', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'pricing', schema='md', type_='unique')
    op.drop_index('pricing_idx_sb_id_status', table_name='pricing', schema='md')
    op.alter_column('pricing', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.alter_column('pricing', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('md.pricing_id_seq'::regclass)"),
               schema='md')
    op.alter_column('pricing', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.alter_column('pricing', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.drop_constraint('price_type_product_attr_start_date_idx', 'price_type_attribute', schema='md', type_='unique')
    op.create_index('price_type_product_attr_start_date_idx', 'price_type_attribute', ['price_type_id', 'product_id', 'client_id', 'attribute', 'start_date'], unique=True, schema='md')
    op.alter_column('price_type', 'price_type',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Price Type: WAC, AMP, BP, RPU, etc.',
               existing_nullable=False,
               schema='md')
    op.alter_column('price_calc_result', 'logic_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Price Calc Logic (sb_id) Reference',
               existing_nullable=False,
               schema='md')
    op.drop_constraint(None, 'price_calc_logic', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'price_calc_logic', schema='md', type_='foreignkey')
    op.create_foreign_key('price_calc_logic_price_type_id_fkey', 'price_calc_logic', 'price_type', ['price_type_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('price_calc_logic_approved_by_fkey', 'price_calc_logic', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_index('logic_idx_sb_id_version', 'price_calc_logic', ['sb_id', 'version'], unique=True, schema='md')
    op.create_index('logic_idx_sb_id_status', 'price_calc_logic', ['sb_id', 'status'], unique=True, schema='md')
    op.alter_column('price_calc_logic', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.alter_column('price_calc_logic', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('md.price_calc_logic_id_seq'::regclass)"),
               schema='md')
    op.alter_column('price_calc_logic', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='md')
    op.alter_column('price_calc_logic', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('perf_event', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               schema='md')
    op.drop_constraint(None, 'payment_portal', schema='md', type_='foreignkey')
    op.alter_column('payment_portal', 'portal_rejected',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('payment_portal', 'payment_sent',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('payment_portal', 'payment_paid',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('note', 'type',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Note Type: Recon/Approval/External',
               existing_nullable=False,
               schema='md')
    op.alter_column('note', 'ref_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary key value of linked table',
               existing_nullable=False,
               schema='md')
    op.alter_column('note', 'link',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Note linked to invoice/submission/transaction',
               existing_nullable=False,
               existing_server_default=sa.text("'invoice'::character varying"),
               schema='md')
    op.alter_column('note', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('md.note_id_seq'::regclass)"),
               schema='md')
    op.alter_column('job', 'status',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.add_column('filetemplate_file', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.filetemplate_file_id_seq'::regclass)"), autoincrement=True, nullable=False), schema='md')
    op.drop_constraint(None, 'filetemplate_file', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'filetemplate_file', schema='md', type_='foreignkey')
    op.create_foreign_key('filetemplate_file_file_id_fkey', 'filetemplate_file', 'file', ['file_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('filetemplate_file_filetemplate_id_fkey', 'filetemplate_file', 'filetemplate', ['filetemplate_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'filetemplate', schema='md', type_='foreignkey')
    op.create_foreign_key('filetemplate_approved_by_fkey', 'filetemplate', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'filetemplate', schema='md', type_='unique')
    op.create_index('filetemplate_sb_id_version', 'filetemplate', ['sb_id', 'version'], unique=True, schema='md')
    op.drop_index('filetemplate_name_key', table_name='filetemplate', schema='md')
    op.alter_column('filetemplate', 'use_custom_logic',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('filetemplate', 'skip_cols',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'),
               schema='md')
    op.alter_column('filetemplate', 'sheet_excluder',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='md')
    op.alter_column('filetemplate', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('md.filetemplate_id_seq'::regclass)"),
               schema='md')
    op.alter_column('filetemplate', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('filetemplate', 'includes_header',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='md')
    op.alter_column('filetemplate', 'custom_logic',
               existing_type=sa.TEXT(),
               nullable=True,
               existing_server_default=sa.text("''::text"),
               schema='md')
    op.drop_constraint(None, 'file_validation', schema='md', type_='foreignkey')
    op.create_foreign_key('file_validation_file_id_fkey', 'file_validation', 'file', ['file_id'], ['id'], source_schema='md', referent_schema='md')
    op.drop_constraint(None, 'file_template_column', schema='md', type_='unique')
    op.drop_constraint(None, 'file_template_column', schema='md', type_='unique')
    op.drop_constraint(None, 'file_template_break', schema='md', type_='unique')
    op.alter_column('file_template_break', 'filetemplate_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('file', 'validated',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               schema='md')
    op.alter_column('file', 'processing_time',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('file', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('md.file_id_seq'::regclass)"),
               schema='md')
    op.alter_column('file', 'full_refresh',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('file', 'deleted',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'),
               schema='md')
    op.drop_constraint(None, 'customer', schema='md', type_='foreignkey')
    op.create_foreign_key('customer_client_id_fkey', 'customer', 'client', ['client_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.alter_column('contract_wholesaler', 'days_delay',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Days Delay',
               existing_nullable=True,
               schema='md')
    op.add_column('contract_terms', sa.Column('effective_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False), schema='md')
    op.alter_column('contract_terms', 'orig_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_terms', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_terms', 'lop_loc_ind',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='md')
    op.alter_column('contract_terms', 'data_source',
               existing_type=postgresql.ENUM('DIRECT_SALES', 'CHARGEBACKS', 'BOTH', name='commoncontractdatasourceenum'),
               nullable=False,
               schema='md')
    op.alter_column('contract_terms', 'data_level',
               existing_type=postgresql.ENUM('AGGREGATE', 'MEMBER', 'PARENT', name='commoncontractdatalevelenum'),
               nullable=False,
               schema='md')
    op.alter_column('contract_terms', 'bfsf',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               schema='md')
    op.alter_column('contract_term_pricing', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='md')
    op.alter_column('contract_term_pricing', 'orig_term_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Term ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_term_pricing', 'orig_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original ID',
               existing_nullable=True,
               existing_server_default=sa.text("currval('md.contract_term_pricing_id_seq'::regclass)"),
               schema='md')
    op.alter_column('contract_term_condition', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='md')
    op.alter_column('contract_term_condition', 'orig_rate_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Term ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_term_condition', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('md.contract_conditions_id_seq'::regclass)"),
               schema='md')
    op.alter_column('contract_term_condition', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='md')
    op.alter_column('contract_product', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='md')
    op.alter_column('contract_product', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='Product Reference',
               schema='md')
    op.alter_column('contract_product', 'orig_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original ID',
               existing_nullable=True,
               existing_server_default=sa.text("currval('md.contract_product_id_seq'::regclass)"),
               schema='md')
    op.alter_column('contract_product', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='md')
    op.add_column('contract', sa.Column('update_dates', sa.VARCHAR(length=1), autoincrement=False, nullable=True), schema='md')
    op.drop_constraint(None, 'contract', schema='md', type_='foreignkey')
    op.create_foreign_key('contract_approved_by_fkey', 'contract', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_index('contract_idx_sb_id_version', 'contract', ['sb_id', 'version'], unique=True, schema='md')
    op.alter_column('contract', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='md')
    op.alter_column('contract', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('contract', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='md')
    op.alter_column('client_service_845_config', 'client_service_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='md')
    op.alter_column('client_service', 'rebate_transfer',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'portal_tricare',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'portal_managed_care',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'),
               schema='md')
    op.alter_column('client_service', 'portal_ind',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'portal_covgap',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.alter_column('client_service', 'cld_validation',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='md')
    op.alter_column('client_service', 'chargeback_transfer',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.add_column('client', sa.Column('login', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False), schema='md')
    op.drop_constraint(None, 'client', schema='md', type_='unique')
    op.create_index('client_name_idx', 'client', ['name'], unique=True, schema='md')
    op.alter_column('client', 'bypass_approvals',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='md')
    op.drop_constraint(None, 'approval', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'approval', schema='md', type_='foreignkey')
    op.drop_constraint(None, 'approval', schema='md', type_='foreignkey')
    op.create_foreign_key('approval_client_id_fkey', 'approval', 'client', ['client_id'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('approval_approved_by_fkey', 'approval', 'user', ['approved_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('approval_modified_by_fkey', 'approval', 'user', ['modified_by'], ['id'], source_schema='md', referent_schema='md', ondelete='CASCADE')
    op.create_index('transaction_override_transaction_id_idx', 'transaction_override', ['transaction_id'], unique=False, schema='mc')
    op.alter_column('transaction_override', 'type',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='original/override',
               existing_nullable=False,
               existing_server_default=sa.text("'override'::character varying"),
               schema='mc')
    op.alter_column('transaction_override', 'flag_applied',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='True when this override rule is applied to the transaction',
               existing_nullable=False,
               existing_server_default=sa.text('true'),
               schema='mc')
    op.drop_index(op.f('ix_mc_transaction_transaction_type'), table_name='transaction', schema='mc')
    op.drop_index(op.f('ix_mc_transaction_row_type'), table_name='transaction', schema='mc')
    op.alter_column('transaction', 'summary_line_number',
               existing_type=sa.VARCHAR(),
               comment='cn_file_name',
               existing_comment='cn_line_number',
               existing_nullable=True,
               schema='mc')
    op.alter_column('transaction', 'credit_amt_applied',
               existing_type=sa.NUMERIC(precision=18, scale=6),
               nullable=True,
               schema='mc')
    op.alter_column('transaction', 'credit_amt',
               existing_type=sa.NUMERIC(precision=18, scale=6),
               nullable=True,
               schema='mc')
    op.alter_column('transaction', 'chain_prior_id',
               existing_type=sa.INTEGER(),
               comment='Self reference to Transaction ID of its prior resub/orig line',
               existing_comment='Self reference to Transaction ID to its prior resub/orig line',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='mc')
    op.drop_index(op.f('ix_mc_stage_transaction_row_type'), table_name='stage_transaction', schema='mc')
    op.alter_column('stage_transaction', 'summary_line_number',
               existing_type=sa.VARCHAR(),
               comment='cn_file_name',
               existing_comment='cn_line_number',
               existing_nullable=True,
               schema='mc')
    op.alter_column('settlement', 'payment_date',
               existing_type=sa.DATE(),
               nullable=False,
               schema='mc')
    op.alter_column('plans', 'plan_start_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plans', 'plan_list_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Plan List ID foreign key',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plans', 'plan_end_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List End Date',
               existing_nullable=False,
               existing_server_default=sa.text("'2099-12-31'::date"),
               schema='mc')
    op.alter_column('plans', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.plans_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('plans', 'customer_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Customer ID foreign key',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'status',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='Status i.e. Active/Inactive',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'plan_list_name',
               existing_type=sa.VARCHAR(length=40),
               comment=None,
               existing_comment='Plan List Name',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plan_list', 'list_start_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('plan_list', 'list_end_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List End Date',
               existing_nullable=False,
               existing_server_default=sa.text("'2099-12-31'::date"),
               schema='mc')
    op.alter_column('plan_list', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.plan_list_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('plan_list', 'flag_global',
               existing_type=sa.VARCHAR(length=1),
               comment=None,
               existing_comment='Y as Global and N is Local',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'customer_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Customer ID foreign key.TODO',
               existing_nullable=True,
               schema='mc')
    op.alter_column('plan_list', 'client_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Client ID foreign key. Will be null if plan is GLOBAL',
               existing_nullable=True,
               schema='mc')
    op.drop_constraint(None, 'payment_tracker_meta', schema='mc', type_='unique')
    op.drop_constraint(None, 'payment_tracker_configuration', schema='mc', type_='foreignkey')
    op.alter_column('payment_tracker_configuration', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'days_to_submit',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'days_to_pay',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'contract_start_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='mc')
    op.alter_column('payment_tracker_configuration', 'contract_end_date',
               existing_type=sa.DATE(),
               nullable=True,
               schema='mc')
    op.drop_constraint(None, 'payment_tracker', schema='mc', type_='foreignkey')
    op.create_foreign_key('payment_tracker_tracker_configuration_id_fkey', 'payment_tracker', 'payment_tracker_configuration', ['tracker_configuration_id'], ['id'], source_schema='mc', referent_schema='mc')
    op.create_foreign_key('payment_tracker_modified_user_id_fkey', 'payment_tracker', 'user', ['modified_user_id'], ['id'], source_schema='mc', referent_schema='md', ondelete='CASCADE')
    op.alter_column('payment_tracker', 'tracker_configuration_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('payment_tracker', 'paid_amount',
               existing_type=sa.NUMERIC(precision=14, scale=2),
               nullable=True,
               schema='mc')
    op.alter_column('payment_tracker', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('override_rule', 'orig_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('override_rule', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('override_rule', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract ID Reference',
               existing_nullable=False,
               schema='mc')
    op.add_column('mc_filetemplate_mapping', sa.Column('additional_filter', sa.VARCHAR(), autoincrement=False, nullable=True), schema='mc')
    op.create_index('mc_filetemplate_mapping_uniq', 'mc_filetemplate_mapping', ['client_id', 'template_sb_id'], unique=True, schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'template_sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'source',
               existing_type=sa.VARCHAR(),
               nullable=True,
               schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'last_processed',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               schema='mc')
    op.alter_column('mc_filetemplate_mapping', 'last_error',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               schema='mc')
    op.create_index('invoice_file_mc_filetemplate_mapping_id_idx', 'invoice_file', ['mc_filetemplate_mapping_id'], unique=False, schema='mc')
    op.create_index('invoice_file_invoice_id_idx', 'invoice_file', ['invoice_id'], unique=False, schema='mc')
    op.drop_constraint(None, 'invoice', schema='mc', type_='foreignkey')
    op.drop_index(op.f('ix_mc_invoice_submission_type'), table_name='invoice', schema='mc')
    op.alter_column('invoice', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.drop_constraint(None, 'exclusions_transactions', schema='mc', type_='foreignkey')
    op.create_foreign_key('exclusions_transactions_transaction_id_fkey', 'exclusions_transactions', 'transaction', ['transaction_id'], ['id'], source_schema='mc', referent_schema='mc', ondelete='CASCADE')
    op.alter_column('exclusions_transactions', 'flag_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Product Active Status - True for Active Products',
               existing_nullable=False,
               existing_server_default=sa.text('true'),
               schema='mc')
    op.drop_index(op.f('ix_mc_credit_credit_type'), table_name='credit', schema='mc')
    op.alter_column('contract_rebates_pp', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'pct_based',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'N'::character varying"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebates_pp_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebates_pp', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebates_pp', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contact ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebates_pp', 'condition_required',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'N'::character varying"),
               schema='mc')
    op.alter_column('contract_rebates', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebates', 'rebate',
               existing_type=sa.NUMERIC(precision=13, scale=6),
               nullable=True,
               schema='mc')
    op.alter_column('contract_rebates', 'price_method',
               existing_type=sa.VARCHAR(length=35),
               nullable=True,
               schema='mc')
    op.alter_column('contract_rebates', 'price_date',
               existing_type=sa.VARCHAR(length=35),
               nullable=True,
               schema='mc')
    op.alter_column('contract_rebates', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebates_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebates', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebates', 'has_overrides',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='mc')
    op.alter_column('contract_rebates', 'evaluate_only',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='mc')
    op.alter_column('contract_rebates', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contact ID Reference',
               existing_nullable=False,
               schema='mc')
    op.create_unique_constraint('contract_rebate_tier_unique_key', 'contract_rebate_tier', ['rebate_condition_id', 'rebate_id', 'tier_name', 'tier_minimum', 'tier_maximum', 'status'], schema='mc')
    op.alter_column('contract_rebate_tier', 'rebate_condition_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Rebate Condition ID Reference',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebate_minimum_amounts_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebate_minimum_amounts', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contact ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'rebate_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contact Rebate ID Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'orig_rebate_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_rebate_conditions', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_rebate_conditions_id_seq'::regclass)"),
               schema='mc')
    op.drop_constraint(None, 'contract_product', schema='mc', type_='foreignkey')
    op.create_foreign_key('contract_product_contract_id_fkey', 'contract_product', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc')
    op.alter_column('contract_product', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_product', 'product_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Product Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_product_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_product', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_product', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.contract_product_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_product', 'expiration_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Contract Product Expiration Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'effective_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Contract Product Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_product', 'current_wac',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment=None,
               existing_comment='Contract Product Current WAC',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_product', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Reference',
               existing_nullable=False,
               schema='mc')
    op.drop_constraint(None, 'contract_pp_prior_violations', schema='mc', type_='foreignkey')
    op.create_foreign_key('contract_pp_prior_violations_contract_id_fkey', 'contract_pp_prior_violations', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc')
    op.create_index('ix_mc_contract_pp_prior_violations_contract_id', 'contract_pp_prior_violations', ['contract_id'], unique=False, schema='mc')
    op.alter_column('contract_pp_prior_violations', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.alter_column('contract_pp_prior_violations', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Header Reference Key',
               existing_nullable=False,
               schema='mc')
    op.create_index('ix_mc_contract_pp_condition_unique', 'contract_pp_condition', ['rebate_condition_id', 'rebate_pp_id'], unique=True, schema='mc')
    op.alter_column('contract_pp_condition', 'rebate_pp_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.alter_column('contract_pp_condition', 'rebate_condition_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='mc')
    op.drop_constraint(None, 'contract_plans', schema='mc', type_='foreignkey')
    op.create_foreign_key('contract_plans_contract_id_fkey', 'contract_plans', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc')
    op.alter_column('contract_plans', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.contract_plans_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_plans', 'expiration_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List Expiration Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'effective_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'customer_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Plans to Customer Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'contract_plan_list_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Plan List Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plans', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Reference',
               existing_nullable=False,
               schema='mc')
    op.drop_constraint(None, 'contract_plan_list', schema='mc', type_='foreignkey')
    op.create_foreign_key('contract_plan_list_contract_id_fkey', 'contract_plan_list', 'contract_header', ['contract_id'], ['id'], source_schema='mc', referent_schema='mc')
    op.alter_column('contract_plan_list', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_plan_list', 'plan_list_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Plan List Reference',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'orig_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='Original ID',
               existing_server_default=sa.text("currval('mc.contract_plan_list_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_plan_list', 'orig_contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Original Contract ID',
               existing_nullable=True,
               schema='mc')
    op.alter_column('contract_plan_list', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('mc.contract_plan_list_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_plan_list', 'expiration_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List Expiration Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'effective_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Plan List Effective Date',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_plan_list', 'contract_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contract Reference',
               existing_nullable=False,
               schema='mc')
    op.drop_constraint(None, 'contract_header', schema='mc', type_='foreignkey')
    op.create_foreign_key('contract_header_approved_by_fkey', 'contract_header', 'user', ['approved_by'], ['id'], source_schema='mc', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'contract_header', schema='mc', type_='unique')
    op.create_index('ch_idx_sb_id_version', 'contract_header', ['sb_id', 'version'], unique=True, schema='mc')
    op.create_index('ch_idx_sb_id_status', 'contract_header', ['sb_id', 'status'], unique=True, schema='mc')
    op.drop_index('contract_header_idx_sb_id_status', table_name='contract_header', schema='mc')
    op.alter_column('contract_header', 'status',
               existing_type=postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::version_status"),
               schema='mc')
    op.alter_column('contract_header', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('mc.contract_header_id_seq'::regclass)"),
               schema='mc')
    op.alter_column('contract_header', 'modified_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'),
               schema='mc')
    op.alter_column('contract_header', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='mc')
    op.alter_column('contract_header', 'days_to_submit',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'),
               schema='mc')
    op.alter_column('contract_header', 'customer_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Customer ID foreign key for contracted customer',
               existing_nullable=False,
               schema='mc')
    op.alter_column('contract_header', 'contract_type',
               existing_type=postgresql.ENUM('MANAGED_CARE', 'TRICARE', 'COVERAGE_GAP', name='ubrcontracttype'),
               nullable=False,
               existing_server_default=sa.text("'MANAGED_CARE'::ubrcontracttype"),
               schema='mc')
    op.alter_column('contract_header', 'client_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Client ID foreign key',
               existing_nullable=False,
               schema='mc')
    op.create_unique_constraint('cond_option_uk2', 'conditions_config', ['cond_val_code'], schema='mc')
    op.create_unique_constraint('cond_option_uk', 'conditions_config', ['cond_code', 'cond_val'], schema='mc')
    op.alter_column('conditions_config', 'cond_val_code',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Condition Value Code',
               existing_nullable=True,
               schema='mc')
    op.alter_column('conditions_config', 'cond_val',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Condition Value',
               existing_nullable=False,
               schema='mc')
    op.alter_column('conditions_config', 'cond_code',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Condition Code',
               existing_nullable=False,
               schema='mc')
    op.alter_column('conditions', 'rebate_condition_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Contact Rebate Condition ID',
               existing_nullable=False,
               schema='mc')
    op.drop_constraint(None, 'validation_join', schema='gp', type_='foreignkey')
    op.create_foreign_key('validation_join_approved_by_fkey', 'validation_join', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'validation_join', schema='gp', type_='unique')
    op.create_index('validation_join_sb_id_version', 'validation_join', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('validation_join_client_id_target_id_alias_source_key', 'validation_join', ['client_id', 'target_id', 'alias', 'source'], unique=True, schema='gp')
    op.drop_index('client_id_target_id_alias_source_key', table_name='validation_join', schema='gp')
    op.alter_column('validation_join', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('gp.validation_join_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('validation_join', 'modified_by',
               existing_type=sa.INTEGER(),
               nullable=True,
               schema='gp')
    op.alter_column('run_attachment', 'ref_id',
               existing_type=sa.INTEGER(),
               comment='Primary key value of run/run_price_type',
               existing_comment='Primary key value of run/run_price_type/job',
               existing_nullable=False,
               schema='gp')
    op.alter_column('run_attachment', 'link',
               existing_type=sa.VARCHAR(),
               comment='Attachment linked to run/run_price_type',
               existing_comment='Attachment linked to run/run_price_type/job',
               existing_nullable=False,
               existing_server_default=sa.text("'run'::character varying"),
               schema='gp')
    op.create_index('ix_gp_rebate_client_status', 'rebate', ['client_id', 'status', 'id'], unique=False, schema='gp')
    op.alter_column('rebate', 'svt_line_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='svt_line_id from UBR used to group original and credit transactions',
               existing_nullable=True,
               schema='gp')
    op.alter_column('rebate', 'source',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='used to track source of manually uploaded data',
               existing_nullable=False,
               existing_server_default=sa.text("''::character varying"),
               schema='gp')
    op.drop_constraint(None, 'product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint(None, 'product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint(None, 'product_cppd', schema='gp', type_='foreignkey')
    op.create_foreign_key('product_cppd_modified_by_fkey', 'product_cppd', 'user', ['modified_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('product_cppd_approved_by_fkey', 'product_cppd', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('product_cppd_client_id_fkey', 'product_cppd', 'client', ['client_id'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'product_cppd', schema='gp', type_='unique')
    op.create_index('product_cppd_idx_sb_id_version', 'product_cppd', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('ix_gp_product_cppd_ndc11', 'product_cppd', ['ndc11'], unique=False, schema='gp')
    op.alter_column('product_cppd', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='gp')
    op.alter_column('product_cppd', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('gp.product_cppd_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('price_type', 'include_chargeback',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'),
               schema='gp')
    op.create_index('ix_gp_nominal_price_id', 'nominal_price', ['id'], unique=False, schema='gp')
    op.drop_constraint(None, 'historic_pricing', schema='gp', type_='foreignkey')
    op.drop_constraint(None, 'historic_pricing', schema='gp', type_='foreignkey')
    op.drop_constraint(None, 'historic_pricing', schema='gp', type_='foreignkey')
    op.create_foreign_key('historic_pricing_approved_by_fkey', 'historic_pricing', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('historic_pricing_modified_by_fkey', 'historic_pricing', 'user', ['modified_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('historic_pricing_client_id_fkey', 'historic_pricing', 'client', ['client_id'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'historic_pricing', schema='gp', type_='unique')
    op.create_index('ix_gp_historic_pricing_id', 'historic_pricing', ['id'], unique=False, schema='gp')
    op.create_index('ix_gp_historic_pricing_client_id', 'historic_pricing', ['client_id'], unique=False, schema='gp')
    op.create_index('historic_pricing_sb_id_version', 'historic_pricing', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('historic_pricing_sb_id_status', 'historic_pricing', ['sb_id', 'status'], unique=True, schema='gp')
    op.drop_index('historic_pricing_idx_sb_id_status', table_name='historic_pricing', schema='gp')
    op.alter_column('historic_pricing', 'unit_price_ndc11',
               existing_type=sa.NUMERIC(precision=16, scale=6),
               comment=None,
               existing_comment='Unit price at NDC11',
               existing_nullable=False,
               existing_server_default=sa.text("'0'::numeric"),
               schema='gp')
    op.alter_column('historic_pricing', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='gp')
    op.alter_column('historic_pricing', 'start_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Period start of price',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('gp.historic_pricing_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('historic_pricing', 'price_type',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='Price Type: WAC, AMP, BP, RPU, etc.',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'period_type',
               existing_type=sa.VARCHAR(length=1),
               comment=None,
               existing_comment='Period Type: M-Monthly, Q-Quarterly, A-Annually, U-User Defined',
               existing_nullable=False,
               schema='gp')
    op.alter_column('historic_pricing', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               autoincrement=True,
               existing_server_default=sa.text("nextval('gp.historic_pricing_id_seq'::regclass)"),
               schema='gp')
    op.alter_column('historic_pricing', 'end_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Period end of price',
               existing_nullable=False,
               schema='gp')
    op.create_index('ix_gp_direct_sale_client_status', 'direct_sale', ['client_id', 'status', 'id'], unique=False, schema='gp')
    op.drop_constraint(None, 'customer_product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint(None, 'customer_product_cppd', schema='gp', type_='foreignkey')
    op.drop_constraint(None, 'customer_product_cppd', schema='gp', type_='foreignkey')
    op.create_foreign_key('customer_product_cppd_client_id_fkey', 'customer_product_cppd', 'client', ['client_id'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('customer_product_cppd_modified_by_fkey', 'customer_product_cppd', 'user', ['modified_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.create_foreign_key('customer_product_cppd_approved_by_fkey', 'customer_product_cppd', 'user', ['approved_by'], ['id'], source_schema='gp', referent_schema='md', ondelete='CASCADE')
    op.drop_constraint(None, 'customer_product_cppd', schema='gp', type_='unique')
    op.create_index('cust_prod_cppd_idx_sb_id_version', 'customer_product_cppd', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('cust_prod_cppd_idx_sb_id_status', 'customer_product_cppd', ['sb_id', 'status'], unique=True, schema='gp')
    op.drop_index('customer_product_cppd_idx_sb_id_status', table_name='customer_product_cppd', schema='gp')
    op.alter_column('customer_product_cppd', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'),
               nullable=False,
               existing_server_default=sa.text("'DRAFT'::baseversionstatusenum"),
               schema='gp')
    op.alter_column('customer_product_cppd', 'sb_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text("currval('gp.customer_product_cppd_id_seq'::regclass)"),
               schema='gp')
    op.create_index('ix_gp_chargeback_client_status', 'chargeback', ['client_id', 'status', 'id'], unique=False, schema='gp')
    op.create_index('gp_cbk_status_idx', 'chargeback', ['status'], unique=False, schema='gp')
    op.create_index('gp_cbk_st_num_idx', 'chargeback', ['st_num'], unique=False, schema='gp')
    op.create_index('gp_cbk_client_id', 'chargeback', ['client_id'], unique=False, schema='gp')
    op.create_index('gp_cbk_bt_num_idx', 'chargeback', ['bt_num'], unique=False, schema='gp')
    op.create_index('bucket_detail_pkey', 'bucket_detail', ['id'], unique=True, schema='gp')
    op.alter_column('bucket_detail', 'discount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               nullable=True,
               schema='gp')
    op.drop_constraint(None, 'customer_staging', schema='cbk', type_='unique')
    op.drop_index(op.f('ix_cbk_customer_staging_line_id'), table_name='customer_staging', schema='cbk')
    op.drop_constraint(None, 'customer_relationship', schema='cbk', type_='foreignkey')
    op.create_foreign_key('customer_relationship_modified_user_id_fkey', 'customer_relationship', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md', ondelete='CASCADE')
    op.alter_column('customer_relationship', 'parent_customer_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.alter_column('customer_relationship', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.alter_column('customer_relationship', 'child_customer_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.drop_constraint(None, 'customer_list_membership', schema='cbk', type_='foreignkey')
    op.create_foreign_key('customer_list_membership_modified_user_id_fkey', 'customer_list_membership', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md', ondelete='CASCADE')
    op.create_unique_constraint('uniq_cbk_customer_list_id_customer_id', 'customer_list_membership', ['customer_list_id', 'customer_id', 'start_date'], schema='cbk')
    op.drop_constraint('uniq_cbk_customer_list_customer', 'customer_list_membership', schema='cbk', type_='unique')
    op.alter_column('customer_list_membership', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.drop_constraint(None, 'customer_list', schema='cbk', type_='foreignkey')
    op.create_foreign_key('customer_list_modified_user_id_fkey', 'customer_list', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md', ondelete='CASCADE')
    op.drop_index(op.f('ix_cbk_customer_list_name'), table_name='customer_list', schema='cbk')
    op.alter_column('customer_list', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.drop_constraint(None, 'customer_identifier_staging', schema='cbk', type_='unique')
    op.drop_index(op.f('ix_cbk_customer_identifier_staging_line_id'), table_name='customer_identifier_staging', schema='cbk')
    op.drop_index(op.f('ix_cbk_customer_identifier_staging_identifier'), table_name='customer_identifier_staging', schema='cbk')
    op.drop_index(op.f('ix_cbk_customer_identifier_staging_id_type'), table_name='customer_identifier_staging', schema='cbk')
    op.drop_index(op.f('ix_cbk_customer_identifier_staging_customer_line_id'), table_name='customer_identifier_staging', schema='cbk')
    op.alter_column('customer_identifier_staging', 'end_date',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("''::character varying"),
               schema='cbk')
    op.drop_constraint(None, 'customer_identifier', schema='cbk', type_='foreignkey')
    op.create_foreign_key('customer_identifier_modified_user_id_fkey', 'customer_identifier', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md', ondelete='CASCADE')
    op.alter_column('customer_identifier', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.alter_column('customer_identifier', 'end_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("'9999-12-31 00:00:00'::timestamp without time zone"),
               schema='cbk')
    op.drop_constraint(None, 'customer', schema='cbk', type_='foreignkey')
    op.create_foreign_key('customer_modified_user_id_fkey', 'customer', 'user', ['modified_user_id'], ['id'], source_schema='cbk', referent_schema='md', ondelete='CASCADE')
    op.create_index('ix_cbk_customer_client_id', 'customer', ['client_id'], unique=False, schema='cbk')
    op.drop_index(op.f('ix_cbk_customer_file_line_id'), table_name='customer', schema='cbk')
    op.drop_index(op.f('ix_cbk_customer_file_id'), table_name='customer', schema='cbk')
    op.alter_column('customer', 'state',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("''::character varying"),
               schema='cbk')
    op.alter_column('customer', 'modified_user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.drop_constraint(None, 'cot', schema='cbk', type_='foreignkey')
    op.create_foreign_key('cot_client_id_fkey', 'cot', 'client', ['client_id'], ['id'], source_schema='cbk', referent_schema='md', ondelete='CASCADE')
    op.alter_column('client_validation', 'validation_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_header', 'validation_status',
               existing_type=postgresql.ENUM('DRAFT', 'IN_PROGRESS', 'VALIDATED', 'PARTIAL_VALIDATED', 'VALIDATED_ERRORS', 'BLOCKED', 'CONFIRMED', 'IN_QUEUE', name='chargebackvalidationstatusenum'),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_header', 'debit_memo_number',
               existing_type=sa.VARCHAR(length=45),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_detail', 'validation_status',
               existing_type=postgresql.ENUM('DRAFT', 'IN_PROGRESS', 'VALIDATED', 'PARTIAL_VALIDATED', 'VALIDATED_ERRORS', 'BLOCKED', 'CONFIRMED', 'IN_QUEUE', name='chargebackvalidationstatusenum'),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_detail', 'ship_to_id',
               existing_type=sa.VARCHAR(length=45),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_detail', 'product_identifier_value',
               existing_type=sa.VARCHAR(length=45),
               nullable=True,
               schema='cbk')
    op.alter_column('chargeback_detail', 'invoice_number',
               existing_type=sa.VARCHAR(length=45),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_detail', 'debit_memo_number',
               existing_type=sa.VARCHAR(length=45),
               nullable=False,
               schema='cbk')
    op.alter_column('chargeback_detail', 'contract_number',
               existing_type=sa.VARCHAR(length=255),
               nullable=True,
               existing_comment='Customer-specific identifier referring to their contract.',
               schema='cbk')
    op.create_table('client_user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.client_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('client_service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=64), server_default=sa.text("'analyst'::character varying"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_service_id'], ['md.client_service.id'], name='client_user_client_service_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['md.user.id'], name='client_user_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_user_pkey'),
    schema='md',
    postgresql_ignore_search_path=False
    )
    op.create_table('rebate_term_customerlist',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.rebate_term_customerlist_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('filter_rules', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['contract_id'], ['md.contract.id'], name='rebate_term_customerlist_contract_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='fk_rebate_term_customerlist_mod_user'),
    sa.PrimaryKeyConstraint('id', name='rebate_term_customerlist_pkey'),
    schema='md',
    postgresql_ignore_search_path=False
    )
    op.create_table('cld_report_file',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('medi.cld_report_file_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('program_entity_alias', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('invoice_quarter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('upload_status', postgresql.ENUM('RUNNING', 'SUCCESS', 'FAIL', name='medicldreportfilestatusenum'), server_default=sa.text("'RUNNING'::medicldreportfilestatusenum"), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filepath', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mimetype', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('report_type', postgresql.ENUM('CLD_DISPUTE_REPORT', name='medicldreporttypeenum'), server_default=sa.text("'CLD_DISPUTE_REPORT'::medicldreporttypeenum"), autoincrement=False, nullable=False),
    sa.Column('aws_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('processing_time', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('uploaded_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('uploaded_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='cld_report_file_client_id_fkey'),
    sa.ForeignKeyConstraint(['program_id'], ['medi.program.id'], name='cld_report_file_program_id_fkey'),
    sa.ForeignKeyConstraint(['state_id'], ['medi.state.id'], name='cld_report_file_state_id_fkey'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['md.user.id'], name='cld_report_file_uploaded_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='cld_report_file_pkey'),
    schema='medi'
    )
    op.create_table('user_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('_password', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('modified_by', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('access_token', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('bypass_sso', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('_refresh_token', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('read_only', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('disabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cookie_update_needed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ms_sso_user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    schema='md'
    )
    op.create_table('customer_payment_info',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.customer_payment_info_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pay_type', postgresql.ENUM('CHECK', 'WIRE', 'ACH', 'EFT', name='cbkcustomerpaymenttypes'), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), server_default=sa.text("'2000-01-01 00:00:00'::timestamp without time zone"), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), server_default=sa.text("'9999-12-31 00:00:00'::timestamp without time zone"), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ach_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('routing_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['cbk.customer.id'], name='customer_payment_info_customer_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='customer_payment_info_modified_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='customer_payment_info_pkey'),
    schema='cbk'
    )
    op.create_index('ix_cbk_customer_payment_info_customer_id', 'customer_payment_info', ['customer_id'], unique=False, schema='cbk')
    op.create_table('customer_845_config',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.customer_845_config_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('auto_generation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('interval', sa.VARCHAR(), server_default=sa.text("'daily'::character varying"), autoincrement=False, nullable=False),
    sa.Column('time_schedule_config', postgresql.TIME(), server_default=sa.text("'00:00:00'::time without time zone"), autoincrement=False, nullable=False),
    sa.Column('pricing_membership_conf', sa.VARCHAR(), server_default=sa.text("'both'::character varying"), autoincrement=False, nullable=False),
    sa.Column('full_incremental_conf', sa.VARCHAR(), server_default=sa.text("'full'::character varying"), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['cbk.customer.id'], name='customer_845_config_customer_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='customer_845_config_pkey'),
    schema='cbk'
    )
    op.create_table('cpiu',
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.cpiu_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('period', sa.VARCHAR(length=6), autoincrement=False, nullable=False),
    sa.Column('cpiu', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('md.cpiu_id_seq'::regclass)"), autoincrement=False, nullable=True),
    sa.Column('modified_by', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='cpiu_approved_by_fkey'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='cpiu_modified_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='cpiu_pkey'),
    sa.UniqueConstraint('sb_id', 'version', name='cpiu_sb_id_version_key'),
    schema='md'
    )
    op.create_index('period_uniq', 'cpiu', ['period'], unique=True, schema='md')
    op.create_index('cpiu_idx_sb_id_status', 'cpiu', ['sb_id', 'status'], unique=True, schema='md')
    op.create_table('client_identifier',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.client_identifier_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('client_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id_type', postgresql.ENUM('EDI_ID', name='clientidentifierenum'), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='client_identifier_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='client_identifier_modified_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='client_identifier_pkey'),
    schema='md'
    )
    op.create_table('customer_notes',
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.customer_notes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('note_type', postgresql.ENUM('INTERNAL', 'EXTERNAL', 'BOTH', name='customernotetype'), autoincrement=False, nullable=False),
    sa.Column('created_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='FK reference to Chargeback Customer.'),
    sa.Column('customer_list_membership_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='FK reference to Chargeback Customer List Membership.'),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['md.user.id'], name='customer_notes_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['customer_id'], ['cbk.customer.id'], name='customer_notes_customer_id_fkey'),
    sa.ForeignKeyConstraint(['customer_list_membership_id'], ['cbk.customer_list_membership.id'], name='customer_notes_customer_list_membership_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='customer_notes_modified_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='customer_notes_pkey'),
    schema='cbk'
    )
    op.create_table('tbill_rate',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.tbill_rate_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('auction_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('rate', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tbill_rate_pkey'),
    schema='md'
    )
    op.create_table('override',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.override_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ndc11', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('dollars', sa.NUMERIC(precision=16, scale=6), autoincrement=False, nullable=True),
    sa.Column('units', sa.NUMERIC(precision=16, scale=6), autoincrement=False, nullable=True),
    sa.Column('min_value', sa.NUMERIC(precision=18, scale=12), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('run_price_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='override_modified_user_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['run_price_type_id'], ['gp.run_price_type.id'], name='override_run_price_type_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='override_pkey'),
    schema='gp'
    )
    op.create_table('data_validation_status',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.data_validation_status_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('validated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='data_validation_status_pkey'),
    schema='gp'
    )
    op.create_table('interest',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('medi.interest_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('ndc11', sa.VARCHAR(length=11), autoincrement=False, nullable=False),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('labeler', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('util_quarter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('orig_inv_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('orig_sub_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('orig_tid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('used_inv_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('used_sub_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('used_tid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('APPLIED', 'OVERRIDDEN', name='intereststatusenum'), autoincrement=False, nullable=True),
    sa.Column('note', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['orig_inv_id'], ['medi.invoice.id'], name='interest_orig_inv_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['orig_sub_id'], ['medi.submission.id'], name='interest_orig_sub_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['orig_tid'], ['medi.transaction.id'], name='interest_orig_tid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['program_id'], ['medi.program.id'], name='interest_program_id_fkey'),
    sa.ForeignKeyConstraint(['state_id'], ['medi.state.id'], name='interest_state_id_fkey'),
    sa.ForeignKeyConstraint(['used_inv_id'], ['medi.invoice.id'], name='interest_used_inv_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['used_sub_id'], ['medi.submission.id'], name='interest_used_sub_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['used_tid'], ['medi.transaction.id'], name='interest_used_tid_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='interest_pkey'),
    schema='medi'
    )
    op.create_index('ix_medi_interest_used_tid', 'interest', ['used_tid'], unique=False, schema='medi')
    op.create_index('ix_medi_interest_used_sub_id', 'interest', ['used_sub_id'], unique=False, schema='medi')
    op.create_index('ix_medi_interest_used_inv_id', 'interest', ['used_inv_id'], unique=False, schema='medi')
    op.create_index('ix_medi_interest_orig_tid', 'interest', ['orig_tid'], unique=False, schema='medi')
    op.create_index('ix_medi_interest_orig_sub_id', 'interest', ['orig_sub_id'], unique=False, schema='medi')
    op.create_index('ix_medi_interest_orig_inv_id', 'interest', ['orig_inv_id'], unique=False, schema='medi')
    op.create_table('importer_template_mapping',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.importer_template_mapping_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_type', postgresql.ENUM('PRODUCT', 'CLD', 'FILE_TEMPLATE', 'ZIP', 'PBR', 'SVT', 'CPIU', 'COT', 'PRODUCT_XREF', 'TRICARE', 'CHARGEBACK', 'GP_PRICE_TYPE', 'DIRECT_SALE', 'TRANS_TYPE', 'GP_CUSTOMER', 'REBATE', 'PRODUCT_BLEND', 'GP_STATE', 'GP_CONTRACT', 'PHS_RESULT', 'CPPD', 'BP_ESTIMATE', 'PRODUCT_CPPD', 'PRICE', 'CUSTOMER_PRODUCT_CPPD', 'ANNUAL_CPIU', 'MEDI_IMPORT', 'MEDI_CREDIT_IMPORT', 'GP_JOINS', 'COVGAP_SUMMARY', 'COVGAP_DETAIL_REPORT', 'TRICARE_INVOICE', 'CHARGEBACK_844', 'TRACKER_CONFIGURATION', 'CONTRACT_TERM_PRICING', 'CHARGEBACK_CUSTOMER', 'LINE_EXTENSION', 'OTC', 'CHARGEBACK_PRODUCT_XREF', 'CHARGEBACK_CONTRACT_XREF', 'PP_CARRY_FORWARD', 'CONTRACTING_ENTITY_FILE', 'PAYMENT_TRACKER', 'CONTRACTING_ENTITY_PLAN_LIST_FILE', 'INVOICE_SUMMARY', 'QUERY_BUILDER_PLAN_LIST_FILE', 'MC_MIGRATION', 'CREDIT_ACKNOWLEDGMENT', 'MC_CONTRACT', 'MC_CONTRACT_HEADER', 'MC_CONTRACT_PRODUCT_GROUP', 'MC_CONTRACT_PRODUCT', 'MC_CONTRACT_PLAN_LIST', 'MC_CONTRACT_REBATES', 'MC_CONTRACT_REBATE_PRODUCT', 'MC_CONTRACT_REBATE_CONDITION', 'MC_CONTRACT_REBATE_TIER', 'MC_CONTRACT_PRICE_PROTECTION', 'MC_CONTRACT_OVERRIDES', 'MC_CONTRACT_MIN_AMOUNT', 'MEDICALCLAIMS', 'SETTLEMENT', 'MD_CONTRACT_IMPORT', 'MD_CONTRACT_HEADER', 'MD_CONTRACT_PRODUCTS', 'MD_CONTRACT_PRICING_TERMS', 'MD_CONTRACT_PT_PRODUCTS', 'MD_CONTRACT_PT_PRICINGS', 'MD_CONTRACT_PT_CUSTOMER_LISTS', 'MD_CONTRACT_PT_MEMBERSHIP_RULES', 'MD_CONTRACT_REBATE_TERMS', 'MD_CONTRACT_RT_PRODUCTS', 'MD_CONTRACT_RT_TIERS', 'MD_CONTRACT_RT_CUSTOMER_LISTS', 'MD_CONTRACT_RT_MEMBERSHIP_RULES', 'MD_CONTRACT_WHOLESALERS', 'TBILL_FILE', name='filetypes'), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('files_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_processed', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_error', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='importer_template_mapping_client_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='importer_template_mapping_pkey'),
    schema='md'
    )
    op.create_table('validation_error',
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.validation_error_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chargeback_header_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chargeback_detail_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('validation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('validation_status', postgresql.ENUM('DRAFT', 'IN_PROGRESS', 'VALIDATED', 'PARTIAL_VALIDATED', 'VALIDATED_ERRORS', 'BLOCKED', 'CONFIRMED', 'IN_QUEUE', name='chargebackvalidationstatusenum'), autoincrement=False, nullable=True),
    sa.Column('validation_run_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resolution', postgresql.ENUM('UNREVIEWED', 'REJECTED', 'OVERRIDDEN', 'REQUIRES_VALIDATION', 'REVIEWED', name='chargebackresolutionenum'), server_default=sa.text("'UNREVIEWED'::chargebackresolutionenum"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chargeback_detail_id'], ['cbk.chargeback_detail.id'], name='validation_error_chargeback_detail_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['chargeback_header_id'], ['cbk.chargeback_header.id'], name='validation_error_chargeback_header_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='validation_error_client_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='validation_error_modified_user_id_fkey'),
    sa.ForeignKeyConstraint(['validation_id'], ['cbk.validation.id'], name='validation_error_validation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='validation_error_pkey'),
    schema='cbk'
    )
    op.create_index('validation_error_client_id_idx', 'validation_error', ['client_id', 'chargeback_detail_id', 'validation_id', 'validation_run_id'], unique=False, schema='cbk')
    op.create_table('data_transfer',
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.data_transfer_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('term_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_transfer', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='data_transfer_client_id_fkey'),
    sa.ForeignKeyConstraint(['contract_id'], ['md.contract.id'], name='data_transfer_contract_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='data_transfer_modified_user_id_fkey'),
    sa.ForeignKeyConstraint(['term_id'], ['md.contract_terms.id'], name='data_transfer_term_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='data_transfer_pkey'),
    schema='md'
    )
    op.create_table('default_notes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.default_notes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='default_notes_client_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['md.user.id'], name='default_notes_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='default_notes_modified_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='default_notes_pkey'),
    schema='cbk'
    )
    op.create_table('customer_list_customer',
    sa.Column('customer_list_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['cbk.customer.id'], name='customer_list_customer_customer_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['customer_list_id'], ['cbk.customer_list.id'], name='customer_list_customer_customer_list_id_fkey', ondelete='CASCADE'),
    sa.UniqueConstraint('customer_list_id', 'customer_id', name='uniq_cbk_customer_list_customer'),
    schema='cbk'
    )
    op.create_index('ix_cbk_customer_list_customer_customer_list_id', 'customer_list_customer', ['customer_list_id'], unique=False, schema='cbk')
    op.create_index('ix_cbk_customer_list_customer_customer_id', 'customer_list_customer', ['customer_id'], unique=False, schema='cbk')
    op.create_table('bp_estimate',
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.bp_estimate_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ndc11', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contract', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('rebate', sa.NUMERIC(precision=18, scale=15), autoincrement=False, nullable=False),
    sa.Column('admin_fee', sa.NUMERIC(precision=18, scale=15), autoincrement=False, nullable=False),
    sa.Column('total_rebate', sa.NUMERIC(precision=18, scale=15), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('gp.bp_estimate_id_seq'::regclass)"), autoincrement=False, nullable=True),
    sa.Column('modified_by', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price_protection', sa.NUMERIC(precision=18, scale=15), server_default=sa.text("'0'::numeric"), autoincrement=False, nullable=False),
    sa.Column('other_rebate', sa.NUMERIC(precision=18, scale=15), server_default=sa.text("'0'::numeric"), autoincrement=False, nullable=False),
    sa.Column('basis_price', sa.NUMERIC(precision=16, scale=6), server_default=sa.text("'0'::numeric"), autoincrement=False, nullable=False),
    sa.Column('net_price', sa.NUMERIC(precision=16, scale=6), server_default=sa.text("'0'::numeric"), autoincrement=False, nullable=False),
    sa.Column('bp_elig', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='bp_estimate_approved_by_fkey'),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='bp_estimate_client_id_fkey'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='bp_estimate_modified_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='bp_estimate_pkey'),
    sa.UniqueConstraint('sb_id', 'version', name='bp_estimate_sb_id_version_key'),
    schema='gp'
    )
    op.create_index('bp_estimate_idx_sb_id_status', 'bp_estimate', ['sb_id', 'status'], unique=True, schema='gp')
    op.create_table('annual_cpiu',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.annual_cpiu_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('year', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cpiu', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('md.annual_cpiu_id_seq'::regclass)"), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('modified_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='annual_cpiu_approved_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='annual_cpiu_modified_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='annual_cpiu_pkey'),
    schema='md'
    )
    op.create_index('year_uniq', 'annual_cpiu', ['year'], unique=True, schema='md')
    op.create_index('ix_md_annual_cpiu_id', 'annual_cpiu', ['id'], unique=False, schema='md')
    op.create_table('archived_data_history',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.archived_data_history_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('archival_type', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('archival_date', sa.DATE(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('archival_key_name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('archival_key_value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('archived_to_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('retrieval_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('retrieval_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('retrieved_by', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('is_stored_local', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='archived_data_history_pkey'),
    schema='md'
    )
    op.create_table('rebate_term_rule',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.rebate_term_rule_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('rule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rule_type', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('value', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('operator', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_list_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_list_id'], ['md.rebate_term_customerlist.id'], name='rebate_term_rule_customer_list_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='fk_rebate_term_rule_mod_user'),
    sa.PrimaryKeyConstraint('id', name='rebate_term_rule_pkey'),
    schema='md'
    )
    op.create_table('product_bkup_10282019',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ndc11', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('ndc9', sa.VARCHAR(length=9), autoincrement=False, nullable=True),
    sa.Column('product_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('product_summary_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('product_brand', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sale_uom', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('unit_uom', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('case_uom', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('unit_conversion_factor', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('case_conversion_factor', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('expiration_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('market_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('fda_approval_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('purchase_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('first_sale_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('termination_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('flag_medi', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('flag_asp', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('flag_nfamp', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('flag_iff', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('baseline_qtr', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('baseline_amp', sa.NUMERIC(precision=14, scale=7), autoincrement=False, nullable=True),
    sa.Column('baseline_cpiu', sa.NUMERIC(precision=14, scale=7), autoincrement=False, nullable=True),
    sa.Column('baseline_quantity', sa.NUMERIC(precision=14, scale=2), autoincrement=False, nullable=True),
    sa.Column('drug_category', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('drug_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('fda_approval_number', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('medi_cod_status', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('dosage_form', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('desi_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('amp_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('route_5i', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('threshold_5i', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('therapeutic_eq_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('ped_clot_factor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sin', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('flag_line_extension', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('flag_client_product', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('product_owner', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_quantity', sa.NUMERIC(precision=14, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_quantity', sa.NUMERIC(precision=14, scale=2), autoincrement=False, nullable=True),
    sa.Column('min_daycon', sa.NUMERIC(precision=14, scale=3), autoincrement=False, nullable=True),
    sa.Column('max_daycon', sa.NUMERIC(precision=14, scale=3), autoincrement=False, nullable=True),
    sa.Column('upc', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('flag_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('min_units_per_rx', sa.NUMERIC(precision=14, scale=3), autoincrement=False, nullable=True),
    sa.Column('max_units_per_rx', sa.NUMERIC(precision=14, scale=3), autoincrement=False, nullable=True),
    sa.Column('integer_units_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('unit_multiple', sa.NUMERIC(precision=14, scale=3), autoincrement=False, nullable=True),
    sa.Column('sb_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('SUPERCEDED', 'ACTIVE', 'PENDING', 'DRAFT', name='version_status'), autoincrement=False, nullable=True),
    sa.Column('modified_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('medicaid_conversion_factor', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('calc_type', postgresql.ENUM('ALWAYS_5I', 'USE_RATIO', 'RCP', name='ratiotypeenum'), autoincrement=False, nullable=True),
    sa.Column('indicator_5i', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('flag_amp', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('flag_bp', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('medicaid_uom', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    schema='md'
    )
    op.create_table('kickout_file',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.kickout_file_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('import_file_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='Imported file ID related this kickout file is for'),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filepath', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mimetype', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='kickout_file_client_id_fkey'),
    sa.ForeignKeyConstraint(['import_file_id'], ['md.file.id'], name='kickout_file_import_file_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='kickout_file_pkey'),
    schema='md'
    )
    op.create_index('ix_md_kickout_file_file_id', 'kickout_file', ['import_file_id'], unique=False, schema='md')
    op.create_table('user_permission_audit',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.user_permission_audit_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('client_user_audit_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resource_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='user_permission_audit_client_id_fkey'),
    sa.ForeignKeyConstraint(['client_user_audit_id'], ['md.client_user_audit.id'], name='user_permission_audit_client_user_audit_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='user_permission_audit_modified_user_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], ['md.service.id'], name='user_permission_audit_service_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['md.user.id'], name='user_permission_audit_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_permission_audit_pkey'),
    schema='md'
    )
    op.create_table('svt_claim_num_sync',
    sa.Column('client', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('svt_claim_num', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('svt_line_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('claim_number', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_table('invoice_receipt_tracker',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('medi.invoice_receipt_tracker_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('labeler', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('invoice_quarter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prior_quarter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('invoice_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cld_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('postmark_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='invoice_receipt_tracker_client_id_fkey'),
    sa.ForeignKeyConstraint(['program_id'], ['medi.program.id'], name='invoice_receipt_tracker_program_id_fkey'),
    sa.ForeignKeyConstraint(['state_id'], ['medi.state.id'], name='invoice_receipt_tracker_state_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='invoice_receipt_tracker_pkey'),
    sa.UniqueConstraint('client_id', 'program_id', 'state_id', 'labeler', 'invoice_quarter', name='cld_invoice_tracker_uniq'),
    schema='medi'
    )
    op.create_table('undo_action',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('object_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('stack_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('capture_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stmt', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('_params', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='undo_action_pkey')
    )
    op.create_index('ix_undo_action_stack_id', 'undo_action', ['stack_id'], unique=False)
    op.create_index('ix_undo_action_capture_id', 'undo_action', ['capture_id'], unique=False)
    op.create_table('bundle_logic',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.bundle_logic_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('gp.bundle_logic_id_seq'::regclass)"), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contract_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contract_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bundle_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bundle_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parent_product_group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('child_product_group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_source', postgresql.ENUM('DS', 'CBK', 'REB', 'DS_CBK', name='bundlesourceenum'), server_default=sa.text("'DS'::bundlesourceenum"), autoincrement=False, nullable=False),
    sa.Column('child_source', postgresql.ENUM('DS', 'CBK', 'REB', 'DS_CBK', name='bundlesourceenum'), server_default=sa.text("'DS'::bundlesourceenum"), autoincrement=False, nullable=False),
    sa.Column('parent_filter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('child_filter', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bundle_period', postgresql.ENUM('MONTHLY', 'QUARTERLY', name='bundleperiodenum'), server_default=sa.text("'MONTHLY'::bundleperiodenum"), autoincrement=False, nullable=False),
    sa.Column('reference_period', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('use_price_date', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('unbundle_dollar_logic', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('unbundle_perc_logic', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('modified_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='bundle_logic_approved_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['child_product_group_id'], ['md.product_group.id'], name='bundle_logic_child_product_group_id_fkey'),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='bundle_logic_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='bundle_logic_modified_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_product_group_id'], ['md.product_group.id'], name='bundle_logic_parent_product_group_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bundle_logic_pkey'),
    schema='gp'
    )
    op.create_index('ix_gp_bundle_logic_id', 'bundle_logic', ['id'], unique=False, schema='gp')
    op.create_index('ix_gp_bundle_logic_client_id', 'bundle_logic', ['client_id'], unique=False, schema='gp')
    op.create_index('client_cont_id_cont_link_start_date_uniq', 'bundle_logic', ['client_id', 'contract_id', 'contract_link', 'contract_name', 'start_date'], unique=True, schema='gp')
    op.create_index('bundle_logic_idx_sb_id_version', 'bundle_logic', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('bundle_logic_idx_sb_id_status', 'bundle_logic', ['sb_id', 'status'], unique=True, schema='gp')
    op.create_table('marketshare_override',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('mc.marketshare_override_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rebate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('aggr_type', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plan_id_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ndc11', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('override_tier_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint('(plan_id_code IS NOT NULL) OR (ndc11 IS NOT NULL)', name='marketshare_override_check'),
    sa.ForeignKeyConstraint(['invoice_id'], ['mc.invoice.id'], name='marketshare_override_invoice_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rebate_id'], ['mc.contract_rebates.id'], name='marketshare_override_rebate_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='marketshare_override_pkey'),
    schema='mc'
    )
    op.create_index('ix_marketshare_override_invoice_id', 'marketshare_override', ['invoice_id'], unique=False, schema='mc')
    op.create_table('term_customerlist',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.term_customerlist_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('filter_rules', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('term_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('orig_term_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contract_id'], ['md.contract.id'], name='term_customerlist_contract_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='fk_term_customerlist_mod_user'),
    sa.ForeignKeyConstraint(['term_id'], ['md.contract_terms.id'], name='term_customerlist_term_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='term_customerlist_pkey'),
    schema='md',
    postgresql_ignore_search_path=False
    )
    op.create_table('chargeback_notes',
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.chargeback_notes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('note_type', postgresql.ENUM('INTERNAL', 'EXTERNAL', 'BOTH', name='chargebacknotetype'), autoincrement=False, nullable=False),
    sa.Column('created_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('chargeback_header_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='FK reference to Chargeback header.'),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chargeback_detail_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='FK reference to Chargeback detail.'),
    sa.ForeignKeyConstraint(['chargeback_detail_id'], ['cbk.chargeback_detail.id'], name='chargeback_notes_chargeback_detail_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['chargeback_header_id'], ['cbk.chargeback_header.id'], name='chargeback_notes_chargeback_header_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['md.user.id'], name='chargeback_notes_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='chargeback_notes_modified_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chargeback_notes_pkey'),
    schema='cbk'
    )
    op.create_table('marketshare_summary',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('mc.marketshare_summary_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plan_id_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ndc11', sa.VARCHAR(length=11), autoincrement=False, nullable=False),
    sa.Column('product_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.NUMERIC(precision=14, scale=3), autoincrement=False, nullable=True),
    sa.Column('rebate_id', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('row_type', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['mc.invoice.id'], name='marketshare_summary_invoice_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rebate_id'], ['mc.contract_rebates.id'], name='marketshare_summary_rebate_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='marketshare_summary_pkey'),
    schema='mc'
    )
    op.create_index('ix_marketshare_summary_invoice_id', 'marketshare_summary', ['invoice_id'], unique=False, schema='mc')
    op.create_table('svt_staging',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('medi.svt_staging_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('svt_dispute', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('svt_warning', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('invoiced_units', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('svt_provider', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sparc_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='svt_staging_pkey'),
    schema='medi'
    )
    op.create_index('ix_medi_svt_staging_sparc_id', 'svt_staging', ['sparc_id'], unique=False, schema='medi')
    op.create_table('redo_action',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('object_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('stack_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('capture_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stmt', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('_params', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='redo_action_pkey')
    )
    op.create_index('ix_redo_action_stack_id', 'redo_action', ['stack_id'], unique=False)
    op.create_index('ix_redo_action_capture_id', 'redo_action', ['capture_id'], unique=False)
    op.create_table('sparc_mc_trans_claim_num',
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('svt_claim_num', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('svt_line_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('old_claim_number', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_table('line_extension',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.line_extension_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('gp.line_extension_id_seq'::regclass)"), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ndc11', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('initial_ndc11', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('modified_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='line_extension_approved_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='line_extension_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='line_extension_modified_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='line_extension_pkey'),
    schema='gp'
    )
    op.create_index('line_extension_idx_sb_id_version', 'line_extension', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('line_extension_idx_sb_id_status', 'line_extension', ['sb_id', 'status'], unique=True, schema='gp')
    op.create_index('ix_gp_line_extension_ndc11', 'line_extension', ['ndc11'], unique=False, schema='gp')
    op.create_index('ix_gp_line_extension_id', 'line_extension', ['id'], unique=False, schema='gp')
    op.create_index('ix_gp_line_extension_client_id', 'line_extension', ['client_id'], unique=False, schema='gp')
    op.create_index('client_ndc11_init_ndc11_start_date_uniq', 'line_extension', ['client_id', 'ndc11', 'initial_ndc11', 'start_date'], unique=True, schema='gp')
    op.create_table('user_permission',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.user_permission_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('flag_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_user_id'], ['md.client_user.id'], name='user_permission_client_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_permission_pkey'),
    schema='md'
    )
    op.create_table('chargeback_header_file',
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('cbk.chargeback_header_file_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_type', postgresql.ENUM('CREDIT_REQUEST', 'CREDIT_ACKNOWLEDGEMENT', name='chargebackheaderfiletypeenum'), autoincrement=False, nullable=False),
    sa.Column('scanned', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('scan_error', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('header_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='chargeback_header_file_client_id_fkey'),
    sa.ForeignKeyConstraint(['header_id'], ['cbk.chargeback_header.id'], name='chargeback_header_file_header_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='chargeback_header_file_modified_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chargeback_header_file_pkey'),
    schema='cbk'
    )
    op.create_table('marketshare_detail',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('mc.marketshare_detail_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plan_id_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ndc11', sa.VARCHAR(length=11), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(precision=14, scale=3), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_percentage', sa.NUMERIC(precision=13, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('tier_achieved', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('override_tier', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('achieved_percentage', sa.NUMERIC(precision=13, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('override_percentage', sa.NUMERIC(precision=13, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rebate_id', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['invoice_id'], ['mc.invoice.id'], name='marketshare_detail_invoice_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rebate_id'], ['mc.contract_rebates.id'], name='marketshare_detail_rebate_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='marketshare_detail_pkey'),
    schema='mc'
    )
    op.create_index('ix_marketshare_detail_invoice_id', 'marketshare_detail', ['invoice_id'], unique=False, schema='mc')
    op.create_table('client_user_audit',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.client_user_audit_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='client_user_audit_client_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='client_user_audit_modified_user_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], ['md.service.id'], name='client_user_audit_service_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['md.user.id'], name='client_user_audit_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='client_user_audit_pkey'),
    schema='md'
    )
    op.create_table('data_validation',
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.data_validation_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('join_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('source', postgresql.ENUM('DS', 'CBK', 'REB', 'TRI', name='bucketsourceenum'), autoincrement=False, nullable=False),
    sa.Column('table_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('period', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('gp.data_validation_id_seq'::regclass)"), autoincrement=False, nullable=True),
    sa.Column('modified_by', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('join_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='data_validation_approved_by_fkey'),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='data_validation_client_id_fkey'),
    sa.ForeignKeyConstraint(['join_id'], ['gp.validation_join.id'], name='data_validation_join_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='data_validation_modified_by_fkey'),
    sa.ForeignKeyConstraint(['table_id'], ['gp.table_dictionary.id'], name='data_validation_table_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='data_validation_pkey'),
    sa.UniqueConstraint('sb_id', 'version', name='data_validation_sb_id_version_key'),
    schema='gp'
    )
    op.create_index('ix_gp_data_validation_period', 'data_validation', ['period'], unique=False, schema='gp')
    op.create_index('ix_gp_data_validation_join_id', 'data_validation', ['join_id'], unique=False, schema='gp')
    op.create_index('ix_gp_data_validation_client_id', 'data_validation', ['client_id'], unique=False, schema='gp')
    op.create_index('data_validation_idx_sb_id_status', 'data_validation', ['sb_id', 'status'], unique=True, schema='gp')
    op.create_table('lambda_error',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.lambda_error_id_seq1'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('process', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('aws_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('arrival_date', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='lambda_error_pkey'),
    schema='md'
    )
    op.create_table('filetemplatemapping',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('medi.filetemplatemapping_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('filetemplate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('program_entity_template_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('files_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_processed', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_error', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['filetemplate_id'], ['md.filetemplate.id'], name='filetemplatemapping_filetemplate_id_fkey'),
    sa.ForeignKeyConstraint(['program_entity_template_id'], ['medi.program_entity_template.id'], name='filetemplatemapping_program_entity_template_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='filetemplatemapping_pkey'),
    schema='medi'
    )
    op.create_table('term_rule',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.term_rule_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('rule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rule_type', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('value', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('operator', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_list_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_list_id'], ['md.term_customerlist.id'], name='term_rule_customer_list_id_fkey'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='fk_term_rule_mod_user'),
    sa.PrimaryKeyConstraint('id', name='term_rule_pkey'),
    schema='md'
    )
    op.create_table('data_validation_agg',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.data_validation_agg_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('period', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source', postgresql.ENUM('DS', 'CBK', 'REB', 'TRI', name='bucketsourceenum'), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('join_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('table_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='data_validation_agg_client_id_fkey'),
    sa.ForeignKeyConstraint(['join_id'], ['gp.validation_join.id'], name='data_validation_agg_join_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['table_id'], ['gp.table_dictionary.id'], name='data_validation_agg_table_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='data_validation_agg_pkey'),
    schema='gp'
    )
    op.create_index('ix_gp_data_validation_agg_period', 'data_validation_agg', ['period'], unique=False, schema='gp')
    op.create_table('user_resource_audit',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('md.user_resource_audit_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('modified_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='user_resource_audit_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_user_id'], ['md.user.id'], name='user_resource_audit_modified_user_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resource_id'], ['md.resource.id'], name='user_resource_audit_resource_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['md.user.id'], name='user_resource_audit_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_resource_audit_pkey'),
    schema='md'
    )
    op.create_table('otc',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gp.otc_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sb_id', sa.INTEGER(), server_default=sa.text("currval('gp.otc_id_seq'::regclass)"), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ndc11', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('baseline_amp', sa.NUMERIC(precision=14, scale=7), autoincrement=False, nullable=True),
    sa.Column('baseline_cpiu', sa.NUMERIC(precision=14, scale=7), autoincrement=False, nullable=True),
    sa.Column('baseline_qtr', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('use_inflation_penalty', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('modified_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_on', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('approved_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('DRAFT', 'PENDING', 'ACTIVE', 'SUPERCEDED', 'INACTIVE', name='baseversionstatusenum'), server_default=sa.text("'DRAFT'::baseversionstatusenum"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['md.user.id'], name='otc_approved_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['client_id'], ['md.client.id'], name='otc_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by'], ['md.user.id'], name='otc_modified_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='otc_pkey'),
    schema='gp'
    )
    op.create_index('otc_idx_sb_id_version', 'otc', ['sb_id', 'version'], unique=True, schema='gp')
    op.create_index('otc_idx_sb_id_status', 'otc', ['sb_id', 'status'], unique=True, schema='gp')
    op.create_index('ix_gp_otc_ndc11', 'otc', ['ndc11'], unique=False, schema='gp')
    op.create_index('ix_gp_otc_id', 'otc', ['id'], unique=False, schema='gp')
    op.create_index('ix_gp_otc_client_id', 'otc', ['client_id'], unique=False, schema='gp')
    # ### end Alembic commands ###


def upgrade_scripts_db():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_scripts_db():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
	
	
import sqlalchemy as sa
from alembic import op


conn = op.get_bind()
conn.execute(sa.text("COMMIT;"))
conn.execute(
        sa.text(
            """
            INSERT INTO md.resource
            (resource_tag_id, name, pretty_name, internal_only, service_id)
            VALUES (
                'MEDI_CLD_EDIT_CLD',
                'medi.cld_edit_cld',
                'Edit CLD',
                'f',
                (SELECT id FROM md.service WHERE name = 'Medicaid')
            );
            """
        )
    )
conn.execute(sa.text("COMMIT;"))

